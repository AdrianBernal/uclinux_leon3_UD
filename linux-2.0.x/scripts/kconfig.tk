#!/usr/bin/wish -f
# FILE: header.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Remove unused do_cmd function (part of the 2.0 sound support).
# - Arrange buttons in three columns for better screen fitting.
# - Add CONSTANT_Y, CONSTANT_M, CONSTANT_N for commands like:
#     dep_tristate 'foo' CONFIG_FOO m
#
# 23 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Shut vfix the hell up.
#
# 24 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Improve the exit message (Jeff Ronne).

#
# This is a handy replacement for ".widget cget" that requires neither tk4
# nor additional source code uglification.
#
proc cget { w option } {
	return "[lindex [$w configure $option] 4]"
}

#
# Function to compensate for broken config.in scripts like the sound driver,
# which make dependencies on variables that are never even conditionally
# defined.
#
proc vfix { var } {
	global $var
	if [ catch {eval concat $$var} ] {
		set $var 4
	}
}

#
# Constant values used by certain dep_tristate commands.
#
set CONSTANT_Y 1
set CONSTANT_M 2
set CONSTANT_N 0
set CONSTANT_E 4

#
# Create a "reference" object to steal colors from.
#
button .ref

#
# On monochrome displays, -disabledforeground is blank by default; that's
# bad.  Fill it with -foreground instead.
#
if { [cget .ref -disabledforeground] == "" } {
	.ref configure -disabledforeground [cget .ref -foreground]
}


#
# Define some macros we will need to parse the config.in file.
#

proc mainmenu_name { text } {
	wm title . "$text"
}

proc menu_option { w menu_num text } {
	global menus_per_column
	global processed_top_level
	set processed_top_level [expr $processed_top_level + 1]
	if { $processed_top_level <= $menus_per_column } then {
	    set myframe left
	} elseif { $processed_top_level <= [expr 2 * $menus_per_column] } then {
	    set myframe middle
	} else {
	    set myframe right
	} 
	button .f0.x$menu_num -anchor w -text "$text" \
	    -command "$w .$w \"$text\""
	pack .f0.x$menu_num -pady 0 -side top -fill x -in .f0.$myframe
}

proc load_configfile { w title func } {
	catch {destroy $w}
	toplevel $w -class Dialog
	global loadfile
	frame $w.x
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	label $w.x.l -text "Enter filename:" -relief raised
	entry $w.x.x -width 35 -relief sunken -borderwidth 2 \
		-textvariable loadfile
	pack $w.x.l $w.x.x -anchor w -side left
	pack $w.x -side top -pady 10
	wm title $w "$title" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "destroy $w; focus $oldFocus;$func .fileio"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

proc maybe_exit { w } {
	catch {destroy $w}
	toplevel $w -class Dialog
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	message $w.m -width 400 -aspect 300 \
		-text "Changes will be lost.  Are you sure?" -relief flat
	pack  $w.m -pady 10 -side top -padx 10
	wm title $w "Are you sure?" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "exit"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

proc read_config_file { w } {
	global loadfile
	if { [string length $loadfile] != 0 && [file readable $loadfile] == 1 } then {
		read_config $loadfile
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to read file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "Bummer" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc write_config_file  { w } {
	global loadfile
	if { [string length $loadfile] != 0 
    		&& ([file writable $loadfile] == 1 || ([file exists $loadfile] == 0 && [file writable [file dirname $loadfile]] == 1)) } then {
		writeconfig $loadfile /dev/null
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to write file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "OK" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc read_config { filename } {
	set file1 [open $filename r]
	clear_choices
	while { [gets $file1 line] >= 0} {
		if [regexp {([0-9A-Za-z_]+)=([ynm])} $line foo var value] {
			if { $value == "y" } then { set cmd "global $var; set $var 1" }
			if { $value == "n" } then { set cmd "global $var; set $var 0" }
			if { $value == "m" } then { set cmd "global $var; set $var 2" }
			eval $cmd
		}
		if [regexp {# ([0-9A-Za-z_]+) is not set} $line foo var] {
			set cmd "global $var; set $var 0"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)=([0-9A-Fa-f]+)} $line foo var value] {
			set cmd "global $var; set $var $value"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)="([^"]*)"} $line foo var value] {
			set cmd "global $var; set $var \"$value\""
			eval $cmd
		}
	}
	close $file1
	update_choices
	update_mainmenu
}
proc write_comment { file1 file2 text } {
    	puts $file1 ""
	puts $file1 "#"
	puts $file1 "# $text"
	puts $file1 "#"
	puts $file2 "/*"
	puts $file2 " * $text"
	puts $file2 " */"
}

proc effective_dep { deplist } {
	global CONFIG_MODULES
	set depend 1
	foreach i $deplist {
		if {$i == 0} then {set depend 0}
		if {$i == 2 && $depend == 1} then {set depend 2}
	}
	if {$depend == 2 && $CONFIG_MODULES == 0} then {set depend 0}
	return $depend
}

proc sync_tristate { var dep } {
	global CONFIG_MODULES
	if {$dep == 0 && ($var == 1 || $var == 2)} then {
		set var 0
	} elseif {$dep == 2 && $var == 1} then {
		set var 2
	} elseif {$var == 2 && $CONFIG_MODULES == 0} then {
		if {$dep == 1} then {set var 1} else {set var 0}
	}
	return $var
}

proc sync_bool { var dep modset } {
	set var [sync_tristate $var $dep]
	if {$dep == 2 && $var == 2} then {
		set var $modset
	}
	return $var
}

proc write_tristate { file1 file2 varname variable deplist modset } {
	set variable [sync_tristate $variable [effective_dep $deplist]]
	if { $variable == 2 } \
		then { set variable $modset }
	if { $variable == 1 } \
		then { puts $file1 "$varname=y"; \
		       puts $file2 "#define $varname 1" } \
	elseif { $variable == 2 } \
		then { puts $file1 "$varname=m"; \
		       puts $file2 "#undef  $varname"; \
		       puts $file2 "#define ${varname}_MODULE 1" } \
	elseif { $variable == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else { \
	    puts stdout "ERROR - Attempting to write value for unconfigured variable ($varname=$variable)." \
	}
}

proc write_int { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts $file2 "#define $varname ($variable)"; \
	}
}

proc write_hex { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts -nonewline $file2 "#define $varname 0x"; \
		puts $file2 [exec echo $variable | sed s/^0\[xX\]//]; \
	}
}

proc write_string { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=\"$variable\""; \
		puts $file2 "#define $varname \"$variable\""; \
	}
}

proc option_name {w mnum line text helpidx} {
	button $w.x$line.l -text "$text" -relief groove -anchor w
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
				-activeback [cget $w.x$line.l -bg]
	button $w.x$line.help -text "Help" -relief raised \
		-command "dohelp .dohelp $helpidx .menu$mnum"
	pack $w.x$line.help -side right -fill y
	pack $w.x$line.l -side right -fill both -expand on
}

proc toggle_switch2 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.m -text "-"  -variable $variable -value 2 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	pack $w.x$line.n $w.x$line.m $w.x$line.y -side right -fill y
}

proc toggle_switch3 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.m -text "m"  -variable $variable -value 2 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	global CONFIG_MODULES
	if {($CONFIG_MODULES == 0)} then {
		$w.x$line.m configure -state disabled
	}
	pack $w.x$line.n $w.x$line.m $w.x$line.y -side right -fill y
}

proc bool {w mnum line text variable} {
	toggle_switch2 $w $mnum $line $text $variable
	$w.x$line.m configure -state disabled
	pack $w.x$line -anchor w -fill both -expand on
}

proc tristate {w mnum line text variable } {
	toggle_switch3 $w $mnum $line $text $variable
	pack $w.x$line -anchor w -fill both -expand on
}

proc dep_tristate {w mnum line text variable } {
	tristate $w $mnum $line $text $variable
}

proc dep_bool {w mnum line text variable } {
	bool $w $mnum $line $text $variable
}

proc int { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 18 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc hex { w mnum line text variable } {
	int $w $mnum $line $text $variable
}

proc istring { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 18 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc minimenu { w mnum line text variable helpidx } {
	frame $w.x$line
	menubutton $w.x$line.x -width 17 -textvariable $variable -menu \
		$w.x$line.x.menu -relief raised \
		-anchor w
	option_name $w $mnum $line $text $helpidx
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc menusplit {w m n} {
	if { $n > 2 } then {
		set menuoptsize [expr [$m yposition 2] - [$m yposition 1]]   
		set maxsize [winfo screenheight $w]
		set splitpoint [expr $maxsize * 4 / 5 / $menuoptsize - 1]
		for {set i [expr $splitpoint + 1]} {$i <= $n} {incr i $splitpoint} {
			$m entryconfigure $i -columnbreak 1
		}
	}
}

proc submenu { w mnum line text subnum } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 15 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief raised -anchor w \
		-command "catch {destroy .menu$subnum}; menu$subnum .menu$subnum \"$text\""
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc comment {w mnum line text } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 15 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief groove -anchor w
	$w.x$line.m configure -activefore [cget $w.x$line.m -fg] \
		-activeback [cget $w.x$line.m -bg]
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc dohelp {w var parent}  {
	catch {destroy $w}
	toplevel $w -class Dialog

	set filefound 0
	set found 0
	set lineno 0

	global help_file
	if { "$help_file" == "" } {
		set help_file "Documentation/Configure.help"
	}

	if { [file readable $help_file] == 1} then {
		set filefound 1
		# First escape sed regexp special characters in var:
		set var [exec echo "$var" | sed s/\[\]\[\/.^$*\]/\\\\&/g]
		# Now pick out right help text:
		set message [exec sed -n "
			/^$var\[ 	\]*\$/,\${
				/^$var\[ 	\]*\$/c\\
${var}:\\

				/^#/b
				/^\[^ 	\]/q
				s/^  //
				p
			}
			" $help_file]
		set found [expr [string length "$message"] > 0]
	}

	frame $w.f1
	pack $w.f1 -fill both -expand on

	# Do the OK button
	#
	set oldFocus [focus]
	frame $w.f2
	button $w.f2.ok -text "OK" \
		-width 10 -command "destroy $w; catch {focus $oldFocus}"
	pack $w.f2.ok -side bottom -pady 6 -anchor n
	pack $w.f2 -side bottom -padx 10 -anchor s

	scrollbar $w.f1.vscroll -command "$w.f1.canvas yview"
	pack $w.f1.vscroll -side right -fill y

	canvas $w.f1.canvas -relief flat -borderwidth 0 \
		-yscrollcommand "$w.f1.vscroll set"
	frame $w.f1.f
	pack $w.f1.canvas -side right -fill y -expand on

	if { $found == 0 } then {
		if { $filefound == 0 } then {
		message $w.f1.f.m -width 750 -aspect 300 -relief flat -text \
			"No help available - unable to open file $help_file.  This file should have come with your kernel."
		} else {
		message $w.f1.f.m -width 400 -aspect 300 -relief flat -text \
			"No help available for $var"
		}
		label $w.f1.bm -bitmap error
		wm title $w "RTFM"
	} else {
		text $w.f1.f.m -width 73 -relief flat -wrap word
		$w.f1.f.m insert 0.0 $message
		$w.f1.f.m conf -state disabled -height [$w.f1.f.m index end]

		label $w.f1.bm -bitmap info
		wm title $w "Configuration help" 
	}
	pack $w.f1.f.m -side left
	pack $w.f1.bm $w.f1.f -side left -padx 10

	focus $w
	set winx [expr [winfo x $parent]+20]
	set winy [expr [winfo y $parent]+20]
	wm geometry $w +$winx+$winy
	set sizok [expr [winfo reqheight $w.f2.ok] + 12]
	set maxy [expr [winfo screenheight .] * 3 / 4]
	set canvtotal [winfo reqheight $w.f1.f.m]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy $canvtotal
	} else {
		set sizy [expr $maxy - $sizok]
	}
	$w.f1.canvas configure -height $sizy -width [winfo reqwidth $w.f1.f.m] \
		-scrollregion "0 0 [winfo reqwidth $w.f1.f.m] \
			[winfo reqheight $w.f1.f.m]"
	$w.f1.canvas create window 0 0 -anchor nw -window $w.f1.f
	update idletasks

	set maxy [winfo screenheight .]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy [expr $sizok + $canvtotal]
	} else {
		set sizy $maxy
	}
	wm maxsize $w [winfo width $w] $sizy
}

proc wrapup {w }  {
	catch {destroy $w}
	toplevel $w -class Dialog

	global CONFIG_MODVERSIONS; vfix CONFIG_MODVERSIONS
	if { ([file exists .hdepend] != 1) || ($CONFIG_MODVERSIONS == 1) } then {
	    message $w.m -width 400 -aspect 300 -relief raised -text \
		"End of Linux kernel configuration.  Check the top-level Makefile for additional configuration.  Next, you must run 'make dep'."
	} else {
	    message $w.m -width 400 -aspect 300 -relief raised -text \
		"End of Linux kernel configuration.  Check the top-level Makefile for additional configuration.  Next, you may 'make bzImage', 'make bzdisk', or 'make bzlilo.'"
	}
	label $w.bm -bitmap info
	pack $w.bm $w.m -pady 10 -side top -padx 10
	wm title $w "Kernel build instructions" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" \
		-width 10 -command "exit"
	pack $w.f.back -side bottom -pady 10 -anchor s
	pack $w.f -pady 10 -side top -padx 10 -anchor s
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy

}

proc unregister_active {num} {
	global active_menus
	set index [lsearch -exact $active_menus $num]
	if {$index != -1} then {set active_menus [lreplace $active_menus $index $index]}
}

proc update_active {} {
	global active_menus total_menus
	set max 0
	if {[llength $active_menus] > 0} then {
		set max [lindex $active_menus end]
		update_define [toplevel_menu [lindex $active_menus 0]] $max 0
	}
	foreach i $active_menus {
		if {[winfo exists .menu$i] == 0} then {
			unregister_active $i
		} else {
			update_menu$i
		}
	}
	update_define [expr $max + 1] $total_menus 1
	update_mainmenu
}

proc configure_entry {w option items} {
	foreach i $items {
		$w.$i configure -state $option
	}
}

proc validate_int {name val default} {
	if {([exec echo $val | sed s/^-//g | tr -d \[:digit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc validate_hex {name val default} {
	if {([exec echo $val | tr -d \[:xdigit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc update_define {first last allow_update} {
	for {set i $first} {$i <= $last} {incr i} {
		update_define_menu$i
		if {$allow_update == 1} then update
	}
}

#
# Next set up the particulars for the top level menu, and define a few
# buttons which we will stick down at the bottom.
#

frame .f0 
frame .f0.left
frame .f0.middle
frame .f0.right

set active_menus [list]
set processed_top_level 0
set help_file ""
set menus_per_column 6
set total_menus 16

proc toplevel_menu {num} {
	if {$num == 7} then {return 6}
	if {$num == 8} then {return 7}
	if {$num == 9} then {return 6}
	if {$num == 14} then {return 13}
	if {$num == 16} then {return 15}
	return $num
}

mainmenu_name "uClinux/Sparc (w/o MMU) Kernel Configuration"
menu_option menu1 1 "Code maturity level options"
proc menu1 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 1}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 1]]
	message $w.m -width 400 -aspect 300 -text \
		"Code maturity level options"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Code maturity level options" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu2 .menu2 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu0 .menu0 \"$title\""
	$w.f.prev configure -state disabled
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 1 0 "Prompt for development and/or incomplete code/drivers" CONFIG_EXPERIMENTAL



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu1 {} {
}


proc update_define_menu1 {} {
	update_define_mainmenu
	global CONFIG_MODULES
}


menu_option menu2 2 "Loadable module support"
proc menu2 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 2}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 2]]
	message $w.m -width 400 -aspect 300 -text \
		"Loadable module support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Loadable module support" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu3 .menu3 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu1 .menu1 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 2 0 "Enable loadable module support" CONFIG_MODULES
	bool $w.config.f 2 1 "Set version information on all symbols for modules" CONFIG_MODVERSIONS
	bool $w.config.f 2 2 "Kernel daemon support (e.g. autoload of modules)" CONFIG_KERNELD



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu2 {} {
	global CONFIG_MODULES
	global CONFIG_MODVERSIONS
	if {($CONFIG_MODULES == 1)} then {
	configure_entry .menu2.config.f.x1 normal {n l y}} else {configure_entry .menu2.config.f.x1 disabled {y n l}}
	global CONFIG_KERNELD
	if {($CONFIG_MODULES == 1)} then {
	configure_entry .menu2.config.f.x2 normal {n l y}} else {configure_entry .menu2.config.f.x2 disabled {y n l}}
}


proc update_define_menu2 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MODVERSIONS
set CONFIG_MODVERSIONS [expr $CONFIG_MODVERSIONS|16]
	global CONFIG_KERNELD
set CONFIG_KERNELD [expr $CONFIG_KERNELD|16]
	if {($CONFIG_MODULES == 1)} then {
	set CONFIG_MODVERSIONS [expr $CONFIG_MODVERSIONS&15]}
	if {($CONFIG_MODULES == 1)} then {
	set CONFIG_KERNELD [expr $CONFIG_KERNELD&15]}
}


menu_option menu3 3 "Platform dependant setup"
proc menu3 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 3}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 3]]
	message $w.m -width 400 -aspect 300 -text \
		"Platform dependant setup"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Platform dependant setup" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu4 .menu4 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu2 .menu2 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	global tmpvar_0
	minimenu $w.config.f 3 0 "CPU" tmpvar_0 CONFIG_LEON_2
	menu $w.config.f.x0.x.menu -title "CPU"
	$w.config.f.x0.x.menu add radiobutton -label "LEON-2.x" -variable tmpvar_0 -value "LEON-2.x" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "LEON-3.x" -variable tmpvar_0 -value "LEON-3.x" -command "update_active"
	menusplit $w $w.config.f.x0.x.menu 2
	comment $w.config.f 3 1 "Platform"
	bool $w.config.f 3 2 "LEON over TSIM - the remote SPARC simulator" CONFIG_LEON4TSIM
	global tmpvar_1
	minimenu $w.config.f 3 3 "Kernel executes from" tmpvar_1 CONFIG_RAMKERNEL
	menu $w.config.f.x3.x.menu -title "Kernel executes from"
	$w.config.f.x3.x.menu add radiobutton -label "RAM" -variable tmpvar_1 -value "RAM" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "ROM" -variable tmpvar_1 -value "ROM" -command "update_active"
	menusplit $w $w.config.f.x3.x.menu 2



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu3 {} {
	global CONFIG_LEON_2
	global CONFIG_LEON_3
	global CONFIG_LEON4TSIM
	if {($CONFIG_LEON_2 == 1 || $CONFIG_LEON_3 == 1)} then {
	configure_entry .menu3.config.f.x2 normal {n l y}} else {configure_entry .menu3.config.f.x2 disabled {y n l}}
}


proc update_define_menu3 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_LEON4TSIM
set CONFIG_LEON4TSIM [expr $CONFIG_LEON4TSIM|16]
	global tmpvar_0
	global CONFIG_LEON_2
	if {$tmpvar_0 == "LEON-2.x"} then {set CONFIG_LEON_2 1} else {set CONFIG_LEON_2 0}
	global CONFIG_LEON_3
	if {$tmpvar_0 == "LEON-3.x"} then {set CONFIG_LEON_3 1} else {set CONFIG_LEON_3 0}
	if {($CONFIG_LEON_2 == 1 || $CONFIG_LEON_3 == 1)} then {
	set CONFIG_LEON4TSIM [expr $CONFIG_LEON4TSIM&15]}
	global tmpvar_1
	global CONFIG_RAMKERNEL
	if {$tmpvar_1 == "RAM"} then {set CONFIG_RAMKERNEL 1} else {set CONFIG_RAMKERNEL 0}
	global CONFIG_ROMKERNEL
	if {$tmpvar_1 == "ROM"} then {set CONFIG_ROMKERNEL 1} else {set CONFIG_ROMKERNEL 0}
}


menu_option menu4 4 "General setup"
proc menu4 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 4}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 4]]
	message $w.m -width 400 -aspect 300 -text \
		"General setup"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "General setup" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu5 .menu5 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu3 .menu3 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 4 0 "PCI bios support" CONFIG_PCI
	bool $w.config.f 4 1 "    PCI device list support" CONFIG_PCIDEVLIST
	bool $w.config.f 4 2 "Networking support" CONFIG_NET
	bool $w.config.f 4 3 "System V IPC" CONFIG_SYSVIPC
	bool $w.config.f 4 4 "Reduced memory footprint" CONFIG_REDUCED_MEMORY
	tristate $w.config.f 4 5 "Kernel support for flat binaries" CONFIG_BINFMT_FLAT
	bool $w.config.f 4 6 "    Enable ZFLAT support" CONFIG_BINFMT_ZFLAT
	bool $w.config.f 4 7 "Console support" CONFIG_CONSOLE
	bool $w.config.f 4 8 "Frame buffer" CONFIG_FRAMEBUFFER



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu4 {} {
	global CONFIG_PCI
	global CONFIG_PCIDEVLIST
	if {($CONFIG_PCI == 1)} then {
	configure_entry .menu4.config.f.x1 normal {n l y}} else {configure_entry .menu4.config.f.x1 disabled {y n l}}
	global CONFIG_BINFMT_FLAT
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu4.config.f.x5 normal {m}} else {configure_entry .menu4.config.f.x5 disabled {m}}
	global CONFIG_BINFMT_ZFLAT
	if {($CONFIG_BINFMT_FLAT != 0)} then {
	configure_entry .menu4.config.f.x6 normal {n l y}} else {configure_entry .menu4.config.f.x6 disabled {y n l}}
	global CONFIG_CONSOLE
	global CONFIG_FRAMEBUFFER
	if {($CONFIG_CONSOLE == 1)} then {
	configure_entry .menu4.config.f.x8 normal {n l y}} else {configure_entry .menu4.config.f.x8 disabled {y n l}}
}


proc update_define_menu4 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_BINFMT_FLAT
	global CONFIG_PCIDEVLIST
set CONFIG_PCIDEVLIST [expr $CONFIG_PCIDEVLIST|16]
	global CONFIG_BINFMT_ZFLAT
set CONFIG_BINFMT_ZFLAT [expr $CONFIG_BINFMT_ZFLAT|16]
	global CONFIG_FRAMEBUFFER
set CONFIG_FRAMEBUFFER [expr $CONFIG_FRAMEBUFFER|16]
	global CONFIG_PCI
	if {($CONFIG_PCI == 1)} then {
	set CONFIG_PCIDEVLIST [expr $CONFIG_PCIDEVLIST&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BINFMT_FLAT == 2)} then {set CONFIG_BINFMT_FLAT 1}}
	if {($CONFIG_BINFMT_FLAT != 0)} then {
	set CONFIG_BINFMT_ZFLAT [expr $CONFIG_BINFMT_ZFLAT&15]}
	global CONFIG_CONSOLE
	if {($CONFIG_CONSOLE == 1)} then {
	set CONFIG_FRAMEBUFFER [expr $CONFIG_FRAMEBUFFER&15]}
}


menu_option menu5 5 "Floppy, IDE, and other block devices"
proc menu5 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 5}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 5]]
	message $w.m -width 400 -aspect 300 -text \
		"Floppy, IDE, and other block devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Floppy, IDE, and other block devices" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu6 .menu6 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu4 .menu4 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 5 0 "ROM disk memory block device" CONFIG_BLK_DEV_BLKMEM
	bool $w.config.f 5 1 "IDE harddisk support" CONFIG_BLK_DEV_IDE
	bool $w.config.f 5 2 "   Include IDE/ATAPI CDROM support" CONFIG_BLK_DEV_IDECD
	bool $w.config.f 5 3 "   Include IDE/ATAPI TAPE support" CONFIG_BLK_DEV_IDETAPE
	bool $w.config.f 5 4 "   Include IDE/ATAPI FLOPPY support (new)" CONFIG_BLK_DEV_IDEFLOPPY
	comment $w.config.f 5 5 "Additional Block/FLASH Devices"
	tristate $w.config.f 5 6 "Loopback device support" CONFIG_BLK_DEV_LOOP
	bool $w.config.f 5 7 "Multiple devices driver support" CONFIG_BLK_DEV_MD
	tristate $w.config.f 5 8 "   Linear (append) mode" CONFIG_MD_LINEAR
	tristate $w.config.f 5 9 "   RAID-0 (striping) mode" CONFIG_MD_STRIPED
	tristate $w.config.f 5 10 "RAM disk support" CONFIG_BLK_DEV_RAM
	bool $w.config.f 5 11 "   Release empty RAM disk blocks" CONFIG_RD_RELEASE_BLOCKS
	tristate $w.config.f 5 12 "FLASH device support" CONFIG_DEV_FLASH
	bool $w.config.f 5 13 "   FLASH Block device" CONFIG_BLK_DEV_FLASH
	bool $w.config.f 5 14 "   FLASH Character device" CONFIG_CHR_DEV_FLASH
	tristate $w.config.f 5 15 "NFA NAND-FLASH device support" CONFIG_BLK_DEV_NFA



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu5 {} {
	global CONFIG_BLK_DEV_BLKMEM
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x0 normal {m}} else {configure_entry .menu5.config.f.x0 disabled {m}}
	global CONFIG_BLK_DEV_IDE
	global CONFIG_BLK_DEV_IDECD
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	configure_entry .menu5.config.f.x2 normal {n l y}} else {configure_entry .menu5.config.f.x2 disabled {y n l}}
	global CONFIG_BLK_DEV_IDETAPE
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	configure_entry .menu5.config.f.x3 normal {n l y}} else {configure_entry .menu5.config.f.x3 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEFLOPPY
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	configure_entry .menu5.config.f.x4 normal {n l y}} else {configure_entry .menu5.config.f.x4 disabled {y n l}}
	global CONFIG_BLK_DEV_LOOP

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x6 normal {m}} else {configure_entry .menu5.config.f.x6 disabled {m}}
	global CONFIG_BLK_DEV_MD
	global CONFIG_MD_LINEAR
	if {($CONFIG_BLK_DEV_MD == 1)} then {
	configure_entry .menu5.config.f.x8 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x8 normal {m}} else {configure_entry .menu5.config.f.x8 disabled {m}}; configure_entry .menu5.config.f.x8 normal {n l}} else {configure_entry .menu5.config.f.x8 disabled {y n m l}}
	global CONFIG_MD_STRIPED
	if {($CONFIG_BLK_DEV_MD == 1)} then {
	configure_entry .menu5.config.f.x9 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x9 normal {m}} else {configure_entry .menu5.config.f.x9 disabled {m}}; configure_entry .menu5.config.f.x9 normal {n l}} else {configure_entry .menu5.config.f.x9 disabled {y n m l}}
	global CONFIG_BLK_DEV_RAM

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x10 normal {m}} else {configure_entry .menu5.config.f.x10 disabled {m}}
	global CONFIG_RD_RELEASE_BLOCKS
	if {($CONFIG_BLK_DEV_RAM == 1)} then {
	configure_entry .menu5.config.f.x11 normal {n l y}} else {configure_entry .menu5.config.f.x11 disabled {y n l}}
	global CONFIG_DEV_FLASH

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x12 normal {m}} else {configure_entry .menu5.config.f.x12 disabled {m}}
	global CONFIG_BLK_DEV_FLASH
	if {($CONFIG_DEV_FLASH == 1)} then {
	configure_entry .menu5.config.f.x13 normal {n l y}} else {configure_entry .menu5.config.f.x13 disabled {y n l}}
	global CONFIG_CHR_DEV_FLASH
	if {($CONFIG_DEV_FLASH == 1)} then {
	configure_entry .menu5.config.f.x14 normal {n l y}} else {configure_entry .menu5.config.f.x14 disabled {y n l}}
	global CONFIG_BLK_DEV_NFA

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x15 normal {m}} else {configure_entry .menu5.config.f.x15 disabled {m}}
}


proc update_define_menu5 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_BLK_DEV_BLKMEM
	global CONFIG_BLK_DEV_LOOP
	global CONFIG_MD_LINEAR
	global CONFIG_MD_STRIPED
	global CONFIG_BLK_DEV_RAM
	global CONFIG_DEV_FLASH
	global CONFIG_BLK_DEV_NFA
	global CONFIG_BLK_DEV_IDECD
set CONFIG_BLK_DEV_IDECD [expr $CONFIG_BLK_DEV_IDECD|16]
	global CONFIG_BLK_DEV_IDETAPE
set CONFIG_BLK_DEV_IDETAPE [expr $CONFIG_BLK_DEV_IDETAPE|16]
	global CONFIG_BLK_DEV_IDEFLOPPY
set CONFIG_BLK_DEV_IDEFLOPPY [expr $CONFIG_BLK_DEV_IDEFLOPPY|16]
set CONFIG_MD_LINEAR [expr $CONFIG_MD_LINEAR|16]
set CONFIG_MD_STRIPED [expr $CONFIG_MD_STRIPED|16]
	global CONFIG_RD_RELEASE_BLOCKS
set CONFIG_RD_RELEASE_BLOCKS [expr $CONFIG_RD_RELEASE_BLOCKS|16]
	global CONFIG_BLK_DEV_FLASH
set CONFIG_BLK_DEV_FLASH [expr $CONFIG_BLK_DEV_FLASH|16]
	global CONFIG_CHR_DEV_FLASH
set CONFIG_CHR_DEV_FLASH [expr $CONFIG_CHR_DEV_FLASH|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_BLKMEM == 2)} then {set CONFIG_BLK_DEV_BLKMEM 1}}
	global CONFIG_BLK_DEV_IDE
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	set CONFIG_BLK_DEV_IDECD [expr $CONFIG_BLK_DEV_IDECD&15]}
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	set CONFIG_BLK_DEV_IDETAPE [expr $CONFIG_BLK_DEV_IDETAPE&15]}
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	set CONFIG_BLK_DEV_IDEFLOPPY [expr $CONFIG_BLK_DEV_IDEFLOPPY&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_LOOP == 2)} then {set CONFIG_BLK_DEV_LOOP 1}}
	global CONFIG_BLK_DEV_MD
	if {($CONFIG_BLK_DEV_MD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MD_LINEAR == 2)} then {set CONFIG_MD_LINEAR 1}; set CONFIG_MD_LINEAR [expr $CONFIG_MD_LINEAR&15]}
	if {($CONFIG_BLK_DEV_MD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MD_STRIPED == 2)} then {set CONFIG_MD_STRIPED 1}; set CONFIG_MD_STRIPED [expr $CONFIG_MD_STRIPED&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_RAM == 2)} then {set CONFIG_BLK_DEV_RAM 1}}
	if {($CONFIG_BLK_DEV_RAM == 1)} then {
	set CONFIG_RD_RELEASE_BLOCKS [expr $CONFIG_RD_RELEASE_BLOCKS&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_DEV_FLASH == 2)} then {set CONFIG_DEV_FLASH 1}}
	if {($CONFIG_DEV_FLASH == 1)} then {
	set CONFIG_BLK_DEV_FLASH [expr $CONFIG_BLK_DEV_FLASH&15]}
	if {($CONFIG_DEV_FLASH == 1)} then {
	set CONFIG_CHR_DEV_FLASH [expr $CONFIG_CHR_DEV_FLASH&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_NFA == 2)} then {set CONFIG_BLK_DEV_NFA 1}}
}


menu_option menu6 6 "Leon3 Amba configuration"
proc menu6 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 6}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 6]]
	message $w.m -width 400 -aspect 300 -text \
		"Leon3 Amba configuration"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Leon3 Amba configuration" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; menu7 .menu7 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu5 .menu5 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	submenu $w.config.f 6 0 "Vendor Gaisler" 7
	submenu $w.config.f 6 1 "Vendor Opencores" 9



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu6 {} {
	global CONFIG_LEON_3
	if {($CONFIG_LEON_3 == 1)} then {configure_entry .menu6.config.f.x0 normal {m}} else {configure_entry .menu6.config.f.x0 disabled {m}}
	if {($CONFIG_LEON_3 == 1)} then {configure_entry .menu6.config.f.x1 normal {m}} else {configure_entry .menu6.config.f.x1 disabled {m}}
}


proc update_define_menu6 {} {
	update_define_mainmenu
	global CONFIG_MODULES
}


proc menu7 {w title} {
	set oldFocus [focus]
	catch {focus .menu6}
	catch {destroy $w; unregister_active 7}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 7]]
	message $w.m -width 400 -aspect 300 -text \
		"Vendor Gaisler"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Vendor Gaisler" 

	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; menu8 .menu8 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu6 .menu6 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 7 0 "APBUart support" CONFIG_GRLIB_GAISLER_APBUART
	bool $w.config.f 7 1 "APBUart fixed speed" CONFIG_GRLIB_GAISLER_APBUART_FIXED
	bool $w.config.f 7 2 "VGA support" CONFIG_GRLIB_GAISLER_VGA
	hex $w.config.f 7 3 "Base address of Videomem" CONFIG_GRLIB_GAISLER_VGAMEM_BASE
	submenu $w.config.f 7 4 "PS/2 drivers" 8



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu6] == 0} then {menu6 .menu6 "Leon3 Amba configuration"}
	set winx [expr [winfo x .menu6]+30]; set winy [expr [winfo y .menu6]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu7 {} {
	global CONFIG_LEON_3
	global CONFIG_GRLIB_GAISLER_APBUART
	if {($CONFIG_LEON_3 == 1)} then {
	configure_entry .menu7.config.f.x0 normal {n l y}} else {configure_entry .menu7.config.f.x0 disabled {y n l}}
	global CONFIG_GRLIB_GAISLER_APBUART_FIXED
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_GAISLER_APBUART == 1)} then {
	configure_entry .menu7.config.f.x1 normal {n l y}} else {configure_entry .menu7.config.f.x1 disabled {y n l}}
	global CONFIG_CONSOLE
	global CONFIG_GRLIB_GAISLER_VGA
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_CONSOLE == 1)} then {
	configure_entry .menu7.config.f.x2 normal {n l y}} else {configure_entry .menu7.config.f.x2 disabled {y n l}}
	global CONFIG_GRLIB_GAISLER_VGAMEM_BASE
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_CONSOLE == 1) && ($CONFIG_GRLIB_GAISLER_VGA == 1)} then {.menu7.config.f.x3.x configure -state normal -foreground [ cget .ref -foreground ]; .menu7.config.f.x3.l configure -state normal; } else {.menu7.config.f.x3.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu7.config.f.x3.l configure -state disabled}
	if {($CONFIG_LEON_3 == 1)} then {configure_entry .menu7.config.f.x4 normal {m}} else {configure_entry .menu7.config.f.x4 disabled {m}}
}


proc update_define_menu7 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_GRLIB_GAISLER_APBUART
set CONFIG_GRLIB_GAISLER_APBUART [expr $CONFIG_GRLIB_GAISLER_APBUART|16]
	global CONFIG_GRLIB_GAISLER_APBUART_FIXED
set CONFIG_GRLIB_GAISLER_APBUART_FIXED [expr $CONFIG_GRLIB_GAISLER_APBUART_FIXED|16]
	global CONFIG_GRLIB_GAISLER_VGA
set CONFIG_GRLIB_GAISLER_VGA [expr $CONFIG_GRLIB_GAISLER_VGA|16]
	global CONFIG_LEON_3
	if {($CONFIG_LEON_3 == 1)} then {
	set CONFIG_GRLIB_GAISLER_APBUART [expr $CONFIG_GRLIB_GAISLER_APBUART&15]}
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_GAISLER_APBUART == 1)} then {
	set CONFIG_GRLIB_GAISLER_APBUART_FIXED [expr $CONFIG_GRLIB_GAISLER_APBUART_FIXED&15]}
	global CONFIG_CONSOLE
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_CONSOLE == 1)} then {
	set CONFIG_GRLIB_GAISLER_VGA [expr $CONFIG_GRLIB_GAISLER_VGA&15]}
	global CONFIG_GRLIB_GAISLER_VGAMEM_BASE
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_CONSOLE == 1) && ($CONFIG_GRLIB_GAISLER_VGA == 1)} then {validate_hex CONFIG_GRLIB_GAISLER_VGAMEM_BASE "$CONFIG_GRLIB_GAISLER_VGAMEM_BASE" 0xc0000000}
}


proc menu8 {w title} {
	set oldFocus [focus]
	catch {focus .menu7}
	catch {destroy $w; unregister_active 8}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 8]]
	message $w.m -width 400 -aspect 300 -text \
		"PS/2 drivers"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "PS/2 drivers" 

	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8; catch {destroy .menu7}; unregister_active 7; menu9 .menu9 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu7 .menu7 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 8 0 "PS/2 support" CONFIG_GRLIB_GAISLER_PS2
	bool $w.config.f 8 1 "PS/2 keyboard" CONFIG_GRLIB_GAISLER_PS2_KEYBOARD



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu7] == 0} then {menu7 .menu7 "Vendor Gaisler"}
	set winx [expr [winfo x .menu7]+30]; set winy [expr [winfo y .menu7]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu8 {} {
	global CONFIG_LEON_3
	global CONFIG_GRLIB_GAISLER_PS2
	if {($CONFIG_LEON_3 == 1)} then {
	configure_entry .menu8.config.f.x0 normal {n l y}} else {configure_entry .menu8.config.f.x0 disabled {y n l}}
	global CONFIG_GRLIB_GAISLER_PS2_KEYBOARD
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_GAISLER_PS2 == 1)} then {
	configure_entry .menu8.config.f.x1 normal {n l y}} else {configure_entry .menu8.config.f.x1 disabled {y n l}}
}


proc update_define_menu8 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_GRLIB_GAISLER_PS2
set CONFIG_GRLIB_GAISLER_PS2 [expr $CONFIG_GRLIB_GAISLER_PS2|16]
	global CONFIG_GRLIB_GAISLER_PS2_KEYBOARD
set CONFIG_GRLIB_GAISLER_PS2_KEYBOARD [expr $CONFIG_GRLIB_GAISLER_PS2_KEYBOARD|16]
	global CONFIG_LEON_3
	if {($CONFIG_LEON_3 == 1)} then {
	set CONFIG_GRLIB_GAISLER_PS2 [expr $CONFIG_GRLIB_GAISLER_PS2&15]}
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_GAISLER_PS2 == 1)} then {
	set CONFIG_GRLIB_GAISLER_PS2_KEYBOARD [expr $CONFIG_GRLIB_GAISLER_PS2_KEYBOARD&15]}
}


proc menu9 {w title} {
	set oldFocus [focus]
	catch {focus .menu6}
	catch {destroy $w; unregister_active 9}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 9]]
	message $w.m -width 400 -aspect 300 -text \
		"Vendor Opencores"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Vendor Opencores" 

	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9; catch {destroy .menu6}; unregister_active 6; menu10 .menu10 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu8 .menu8 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 9 0 "Ethernet support" CONFIG_GRLIB_OPENCORES_ETHERNET
	hex $w.config.f 9 1 "IRQ of Open-Eth" CONFIG_GRLIB_OPENCORES_IRQ_ETH_0
	hex $w.config.f 9 2 "Base address of Open-Eth" CONFIG_GRLIB_OPENCORES_ETH_BASE_ADD
	hex $w.config.f 9 3 "MAC-Address of Open-Eth, byte 0" CONFIG_GRLIB_OPENCORES_MACADDR0
	hex $w.config.f 9 4 "MAC-Address of Open-Eth, byte 1" CONFIG_GRLIB_OPENCORES_MACADDR1
	hex $w.config.f 9 5 "MAC-Address of Open-Eth, byte 2" CONFIG_GRLIB_OPENCORES_MACADDR2
	hex $w.config.f 9 6 "MAC-Address of Open-Eth, byte 3" CONFIG_GRLIB_OPENCORES_MACADDR3
	hex $w.config.f 9 7 "MAC-Address of Open-Eth, byte 4" CONFIG_GRLIB_OPENCORES_MACADDR4
	hex $w.config.f 9 8 "MAC-Address of Open-Eth, byte 5" CONFIG_GRLIB_OPENCORES_MACADDR5



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu6] == 0} then {menu6 .menu6 "Leon3 Amba configuration"}
	set winx [expr [winfo x .menu6]+30]; set winy [expr [winfo y .menu6]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu9 {} {
	global CONFIG_LEON_3
	global CONFIG_GRLIB_OPENCORES_ETHERNET
	if {($CONFIG_LEON_3 == 1)} then {
	configure_entry .menu9.config.f.x0 normal {n l y}} else {configure_entry .menu9.config.f.x0 disabled {y n l}}
	global CONFIG_GRLIB_OPENCORES_IRQ_ETH_0
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {.menu9.config.f.x1.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x1.l configure -state normal; } else {.menu9.config.f.x1.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x1.l configure -state disabled}
	global CONFIG_GRLIB_OPENCORES_ETH_BASE_ADD
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {.menu9.config.f.x2.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x2.l configure -state normal; } else {.menu9.config.f.x2.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x2.l configure -state disabled}
	global CONFIG_GRLIB_OPENCORES_MACADDR0
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {.menu9.config.f.x3.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x3.l configure -state normal; } else {.menu9.config.f.x3.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x3.l configure -state disabled}
	global CONFIG_GRLIB_OPENCORES_MACADDR1
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {.menu9.config.f.x4.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x4.l configure -state normal; } else {.menu9.config.f.x4.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x4.l configure -state disabled}
	global CONFIG_GRLIB_OPENCORES_MACADDR2
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {.menu9.config.f.x5.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x5.l configure -state normal; } else {.menu9.config.f.x5.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x5.l configure -state disabled}
	global CONFIG_GRLIB_OPENCORES_MACADDR3
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {.menu9.config.f.x6.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x6.l configure -state normal; } else {.menu9.config.f.x6.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x6.l configure -state disabled}
	global CONFIG_GRLIB_OPENCORES_MACADDR4
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {.menu9.config.f.x7.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x7.l configure -state normal; } else {.menu9.config.f.x7.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x7.l configure -state disabled}
	global CONFIG_GRLIB_OPENCORES_MACADDR5
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {.menu9.config.f.x8.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x8.l configure -state normal; } else {.menu9.config.f.x8.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x8.l configure -state disabled}
}


proc update_define_menu9 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_GRLIB_OPENCORES_ETHERNET
set CONFIG_GRLIB_OPENCORES_ETHERNET [expr $CONFIG_GRLIB_OPENCORES_ETHERNET|16]
	global CONFIG_LEON_3
	if {($CONFIG_LEON_3 == 1)} then {
	set CONFIG_GRLIB_OPENCORES_ETHERNET [expr $CONFIG_GRLIB_OPENCORES_ETHERNET&15]}
	global CONFIG_GRLIB_OPENCORES_IRQ_ETH_0
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {validate_hex CONFIG_GRLIB_OPENCORES_IRQ_ETH_0 "$CONFIG_GRLIB_OPENCORES_IRQ_ETH_0" 0x0C}
	global CONFIG_GRLIB_OPENCORES_ETH_BASE_ADD
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {validate_hex CONFIG_GRLIB_OPENCORES_ETH_BASE_ADD "$CONFIG_GRLIB_OPENCORES_ETH_BASE_ADD" 0xB0000000}
	global CONFIG_GRLIB_OPENCORES_MACADDR0
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {validate_hex CONFIG_GRLIB_OPENCORES_MACADDR0 "$CONFIG_GRLIB_OPENCORES_MACADDR0" 0xDE}
	global CONFIG_GRLIB_OPENCORES_MACADDR1
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {validate_hex CONFIG_GRLIB_OPENCORES_MACADDR1 "$CONFIG_GRLIB_OPENCORES_MACADDR1" 0xAD}
	global CONFIG_GRLIB_OPENCORES_MACADDR2
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {validate_hex CONFIG_GRLIB_OPENCORES_MACADDR2 "$CONFIG_GRLIB_OPENCORES_MACADDR2" 0xBE}
	global CONFIG_GRLIB_OPENCORES_MACADDR3
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {validate_hex CONFIG_GRLIB_OPENCORES_MACADDR3 "$CONFIG_GRLIB_OPENCORES_MACADDR3" 0xEF}
	global CONFIG_GRLIB_OPENCORES_MACADDR4
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {validate_hex CONFIG_GRLIB_OPENCORES_MACADDR4 "$CONFIG_GRLIB_OPENCORES_MACADDR4" 0x08}
	global CONFIG_GRLIB_OPENCORES_MACADDR5
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {validate_hex CONFIG_GRLIB_OPENCORES_MACADDR5 "$CONFIG_GRLIB_OPENCORES_MACADDR5" 0x15}
}


menu_option menu10 10 "Controller Area Network Cards/Chips"
proc menu10 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 10}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 10]]
	message $w.m -width 400 -aspect 300 -text \
		"Controller Area Network Cards/Chips"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Controller Area Network Cards/Chips" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu11 .menu11 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu9 .menu9 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 10 0 "can4linux Support" CONFIG_CAN4LINUX



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu10 {} {
	global CONFIG_CAN4LINUX
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu10.config.f.x0 normal {m}} else {configure_entry .menu10.config.f.x0 disabled {m}}
}


proc update_define_menu10 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_CAN4LINUX

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_CAN4LINUX == 2)} then {set CONFIG_CAN4LINUX 1}}
}


menu_option menu11 11 "Networking options"
proc menu11 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 11}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 11]]
	message $w.m -width 400 -aspect 300 -text \
		"Networking options"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Networking options" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu12 .menu12 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu10 .menu10 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 11 0 "Network firewalls" CONFIG_FIREWALL
	bool $w.config.f 11 1 "Network aliasing" CONFIG_NET_ALIAS
	bool $w.config.f 11 2 "TCP/IP networking" CONFIG_INET
	bool $w.config.f 11 3 "  IP: forwarding/gatewaying" CONFIG_IP_FORWARD
	bool $w.config.f 11 4 "  IP: multicasting" CONFIG_IP_MULTICAST
	bool $w.config.f 11 5 "  IP: syn cookies" CONFIG_SYN_COOKIES
	bool $w.config.f 11 6 "  IP: firewalling" CONFIG_IP_FIREWALL
	bool $w.config.f 11 7 "    IP: firewall packet logging" CONFIG_IP_FIREWALL_VERBOSE
	bool $w.config.f 11 8 "    IP: masquerading" CONFIG_IP_MASQUERADE
	comment $w.config.f 11 9 "Protocol-specific masquerading support will be built as modules."
	bool $w.config.f 11 10 "      IP: ipautofw masquerading (EXPERIMENTAL)" CONFIG_IP_MASQUERADE_IPAUTOFW
	bool $w.config.f 11 11 "      IP: ipportfw masquerading (EXPERIMENTAL)" CONFIG_IP_MASQUERADE_IPPORTFW
	bool $w.config.f 11 12 "      IP: MS PPTP masq support (EXPERIMENTAL)" CONFIG_IP_MASQUERADE_PPTP
	bool $w.config.f 11 13 "        IP: MS PPTP Call ID masq support" CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT
	bool $w.config.f 11 14 "        IP: MS PPTP masq debugging" DEBUG_IP_MASQUERADE_PPTP
	bool $w.config.f 11 15 "          IP: MS PPTP masq verbose debugging" DEBUG_IP_MASQUERADE_PPTP_VERBOSE
	bool $w.config.f 11 16 "      IP: IPSEC ESP & ISAKMP masq support (EXPERIMENTAL)" CONFIG_IP_MASQUERADE_IPSEC
	int $w.config.f 11 17 "IP: IPSEC masq table lifetime (minutes)" CONFIG_IP_MASQUERADE_IPSEC_EXPIRE
	bool $w.config.f 11 18 "        IP: Disable inbound ESP destination guessing" CONFIG_IP_MASQUERADE_IPSEC_NOGUESS
	bool $w.config.f 11 19 "        IP: IPSEC masq debugging" DEBUG_IP_MASQUERADE_IPSEC
	bool $w.config.f 11 20 "        IP: IPSEC masq verbose debugging" DEBUG_IP_MASQUERADE_IPSEC_VERBOSE
	bool $w.config.f 11 21 "      IP: ICMP masquerading" CONFIG_IP_MASQUERADE_ICMP
	bool $w.config.f 11 22 "    IP: transparent proxy support (EXPERIMENTAL)" CONFIG_IP_TRANSPARENT_PROXY
	bool $w.config.f 11 23 "    IP: always defragment" CONFIG_IP_ALWAYS_DEFRAG
	bool $w.config.f 11 24 "  IP: accounting" CONFIG_IP_ACCT
	bool $w.config.f 11 25 "  IP: optimize as router not host" CONFIG_IP_ROUTER
	tristate $w.config.f 11 26 "  IP: tunneling" CONFIG_NET_IPIP
	bool $w.config.f 11 27 "  IP: multicast routing (EXPERIMENTAL)" CONFIG_IP_MROUTE
	tristate $w.config.f 11 28 "  IP: aliasing support" CONFIG_IP_ALIAS
	bool $w.config.f 11 29 "  IP: ARP daemon support (EXPERIMENTAL)" CONFIG_ARPD
	comment $w.config.f 11 30 "(it is safe to leave these untouched)"
	bool $w.config.f 11 31 "  IP: PC/TCP compatibility mode" CONFIG_INET_PCTCP
	tristate $w.config.f 11 32 "  IP: Reverse ARP" CONFIG_INET_RARP
	bool $w.config.f 11 33 "  IP: Disable Path MTU Discovery (normally enabled)" CONFIG_NO_PATH_MTU_DISCOVERY
	bool $w.config.f 11 34 "  IP: Drop source routed frames" CONFIG_IP_NOSR
	bool $w.config.f 11 35 "  IP: Allow large windows (not recommended if <16Mb of memory)" CONFIG_SKB_LARGE
	comment $w.config.f 11 36 " "
	tristate $w.config.f 11 37 "The IPX protocol" CONFIG_IPX
	tristate $w.config.f 11 38 "Appletalk DDP" CONFIG_ATALK
	tristate $w.config.f 11 39 "Amateur Radio AX.25 Level 2" CONFIG_AX25
	dep_tristate $w.config.f 11 40 "  Amateur Radio NET/ROM" CONFIG_NETROM
	dep_tristate $w.config.f 11 41 "  Amateur Radio X.25 PLP (Rose)" CONFIG_ROSE
	bool $w.config.f 11 42 "Bridging (EXPERIMENTAL)" CONFIG_BRIDGE
	bool $w.config.f 11 43 "Kernel/User network link driver" CONFIG_NETLINK
	bool $w.config.f 11 44 "  Routing messages" CONFIG_RTNETLINK
	tristate $w.config.f 11 45 "IP Security Protocol (FreeS/WAN IPSEC)" CONFIG_IPSEC
	comment $w.config.f 11 46 "IPSec options (FreeS/WAN)"
	bool $w.config.f 11 47 "   IPSEC: IP-in-IP encapsulation (tunnel mode)" CONFIG_IPSEC_IPIP
	bool $w.config.f 11 48 "   IPSEC: Authentication Header" CONFIG_IPSEC_AH
	bool $w.config.f 11 49 "      HMAC-MD5 authentication algorithm" CONFIG_IPSEC_AUTH_HMAC_MD5
	bool $w.config.f 11 50 "      HMAC-SHA1 authentication algorithm" CONFIG_IPSEC_AUTH_HMAC_SHA1
	bool $w.config.f 11 51 "   IPSEC: Encapsulating Security Payload" CONFIG_IPSEC_ESP
	bool $w.config.f 11 52 "      DES encryption algorithm" CONFIG_IPSEC_ENC_DES
	bool $w.config.f 11 53 "      3DES encryption algorithm" CONFIG_IPSEC_ENC_3DES
	bool $w.config.f 11 54 "   IPSEC: IP Compression" CONFIG_IPSEC_IPCOMP
	bool $w.config.f 11 55 "      LZS compression" CONFIG_IPSEC_IPCOMP_LZS
	bool $w.config.f 11 56 "   IPSEC Debugging Option" CONFIG_IPSEC_DEBUG
	bool $w.config.f 11 57 "   IPSEC NAT-Traversal" CONFIG_IPSEC_NAT_TRAVERSAL



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu11 {} {
	global CONFIG_NET
	global CONFIG_FIREWALL
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu11.config.f.x0 normal {n l y}} else {configure_entry .menu11.config.f.x0 disabled {y n l}}
	global CONFIG_NET_ALIAS
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu11.config.f.x1 normal {n l y}} else {configure_entry .menu11.config.f.x1 disabled {y n l}}
	global CONFIG_INET
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu11.config.f.x2 normal {n l y}} else {configure_entry .menu11.config.f.x2 disabled {y n l}}
	global CONFIG_IP_FORWARD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x3 normal {n l y}} else {configure_entry .menu11.config.f.x3 disabled {y n l}}
	global CONFIG_IP_MULTICAST
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x4 normal {n l y}} else {configure_entry .menu11.config.f.x4 disabled {y n l}}
	global CONFIG_SYN_COOKIES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x5 normal {n l y}} else {configure_entry .menu11.config.f.x5 disabled {y n l}}
	global CONFIG_IP_FIREWALL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1)} then {
	configure_entry .menu11.config.f.x6 normal {n l y}} else {configure_entry .menu11.config.f.x6 disabled {y n l}}
	global CONFIG_IP_FIREWALL_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	configure_entry .menu11.config.f.x7 normal {n l y}} else {configure_entry .menu11.config.f.x7 disabled {y n l}}
	global CONFIG_IP_MASQUERADE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	configure_entry .menu11.config.f.x8 normal {n l y}} else {configure_entry .menu11.config.f.x8 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {configure_entry .menu11.config.f.x9 normal {m}} else {configure_entry .menu11.config.f.x9 disabled {m}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_IP_MASQUERADE_IPAUTOFW
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu11.config.f.x10 normal {n l y}} else {configure_entry .menu11.config.f.x10 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_IPPORTFW
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu11.config.f.x11 normal {n l y}} else {configure_entry .menu11.config.f.x11 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu11.config.f.x12 normal {n l y}} else {configure_entry .menu11.config.f.x12 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {
	configure_entry .menu11.config.f.x13 normal {n l y}} else {configure_entry .menu11.config.f.x13 disabled {y n l}}
	global DEBUG_IP_MASQUERADE_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {
	configure_entry .menu11.config.f.x14 normal {n l y}} else {configure_entry .menu11.config.f.x14 disabled {y n l}}
	global DEBUG_IP_MASQUERADE_PPTP_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1) && ($DEBUG_IP_MASQUERADE_PPTP == 1)} then {
	configure_entry .menu11.config.f.x15 normal {n l y}} else {configure_entry .menu11.config.f.x15 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_IPSEC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu11.config.f.x16 normal {n l y}} else {configure_entry .menu11.config.f.x16 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_IPSEC_EXPIRE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {.menu11.config.f.x17.x configure -state normal -foreground [ cget .ref -foreground ]; .menu11.config.f.x17.l configure -state normal; } else {.menu11.config.f.x17.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu11.config.f.x17.l configure -state disabled}
	global CONFIG_IP_MASQUERADE_IPSEC_NOGUESS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {
	configure_entry .menu11.config.f.x18 normal {n l y}} else {configure_entry .menu11.config.f.x18 disabled {y n l}}
	global DEBUG_IP_MASQUERADE_IPSEC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {
	configure_entry .menu11.config.f.x19 normal {n l y}} else {configure_entry .menu11.config.f.x19 disabled {y n l}}
	global DEBUG_IP_MASQUERADE_IPSEC_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1) && ($DEBUG_IP_MASQUERADE_IPSEC == 1)} then {
	configure_entry .menu11.config.f.x20 normal {n l y}} else {configure_entry .menu11.config.f.x20 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_ICMP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {
	configure_entry .menu11.config.f.x21 normal {n l y}} else {configure_entry .menu11.config.f.x21 disabled {y n l}}
	global CONFIG_IP_TRANSPARENT_PROXY
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu11.config.f.x22 normal {n l y}} else {configure_entry .menu11.config.f.x22 disabled {y n l}}
	global CONFIG_IP_ALWAYS_DEFRAG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	configure_entry .menu11.config.f.x23 normal {n l y}} else {configure_entry .menu11.config.f.x23 disabled {y n l}}
	global CONFIG_IP_ACCT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x24 normal {n l y}} else {configure_entry .menu11.config.f.x24 disabled {y n l}}
	global CONFIG_IP_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x25 normal {n l y}} else {configure_entry .menu11.config.f.x25 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_NET_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x26 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x26 normal {m}} else {configure_entry .menu11.config.f.x26 disabled {m}}; configure_entry .menu11.config.f.x26 normal {n l}} else {configure_entry .menu11.config.f.x26 disabled {y n m l}}
	global CONFIG_IP_MROUTE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu11.config.f.x27 normal {n l y}} else {configure_entry .menu11.config.f.x27 disabled {y n l}}
	global CONFIG_IP_ALIAS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NET_ALIAS == 1)} then {
	configure_entry .menu11.config.f.x28 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x28 normal {m}} else {configure_entry .menu11.config.f.x28 disabled {m}}; configure_entry .menu11.config.f.x28 normal {n l}} else {configure_entry .menu11.config.f.x28 disabled {y n m l}}
	global CONFIG_NETLINK
	global CONFIG_ARPD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_NETLINK == 1)} then {
	configure_entry .menu11.config.f.x29 normal {n l y}} else {configure_entry .menu11.config.f.x29 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {configure_entry .menu11.config.f.x30 normal {m}} else {configure_entry .menu11.config.f.x30 disabled {m}}
	global CONFIG_INET_PCTCP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x31 normal {n l y}} else {configure_entry .menu11.config.f.x31 disabled {y n l}}
	global CONFIG_INET_RARP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x32 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x32 normal {m}} else {configure_entry .menu11.config.f.x32 disabled {m}}; configure_entry .menu11.config.f.x32 normal {n l}} else {configure_entry .menu11.config.f.x32 disabled {y n m l}}
	global CONFIG_NO_PATH_MTU_DISCOVERY
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x33 normal {n l y}} else {configure_entry .menu11.config.f.x33 disabled {y n l}}
	global CONFIG_IP_NOSR
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x34 normal {n l y}} else {configure_entry .menu11.config.f.x34 disabled {y n l}}
	global CONFIG_SKB_LARGE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu11.config.f.x35 normal {n l y}} else {configure_entry .menu11.config.f.x35 disabled {y n l}}
	if {($CONFIG_NET == 1)} then {configure_entry .menu11.config.f.x36 normal {m}} else {configure_entry .menu11.config.f.x36 disabled {m}}
	global CONFIG_IPX
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu11.config.f.x37 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x37 normal {m}} else {configure_entry .menu11.config.f.x37 disabled {m}}; configure_entry .menu11.config.f.x37 normal {n l}} else {configure_entry .menu11.config.f.x37 disabled {y n m l}}
	global CONFIG_ATALK
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu11.config.f.x38 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x38 normal {m}} else {configure_entry .menu11.config.f.x38 disabled {m}}; configure_entry .menu11.config.f.x38 normal {n l}} else {configure_entry .menu11.config.f.x38 disabled {y n m l}}
	global CONFIG_AX25
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu11.config.f.x39 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x39 normal {m}} else {configure_entry .menu11.config.f.x39 disabled {m}}; configure_entry .menu11.config.f.x39 normal {n l}} else {configure_entry .menu11.config.f.x39 disabled {y n m l}}
	global CONFIG_NETROM
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_NETROM [sync_tristate $CONFIG_NETROM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu11.config.f.x40 disabled {y}} else {configure_entry .menu11.config.f.x40 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu11.config.f.x40 disabled {m}} else {configure_entry .menu11.config.f.x40 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x40 normal {m}} else {configure_entry .menu11.config.f.x40 disabled {m}}; configure_entry .menu11.config.f.x40 normal {n l}} else {configure_entry .menu11.config.f.x40 disabled {y n m l}}
	global CONFIG_ROSE
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_ROSE [sync_tristate $CONFIG_ROSE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu11.config.f.x41 disabled {y}} else {configure_entry .menu11.config.f.x41 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu11.config.f.x41 disabled {m}} else {configure_entry .menu11.config.f.x41 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x41 normal {m}} else {configure_entry .menu11.config.f.x41 disabled {m}}; configure_entry .menu11.config.f.x41 normal {n l}} else {configure_entry .menu11.config.f.x41 disabled {y n m l}}
	global CONFIG_BRIDGE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu11.config.f.x42 normal {n l y}} else {configure_entry .menu11.config.f.x42 disabled {y n l}}
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu11.config.f.x43 normal {n l y}} else {configure_entry .menu11.config.f.x43 disabled {y n l}}
	global CONFIG_RTNETLINK
	if {($CONFIG_NET == 1) && ($CONFIG_NETLINK == 1)} then {
	configure_entry .menu11.config.f.x44 normal {n l y}} else {configure_entry .menu11.config.f.x44 disabled {y n l}}
	global CONFIG_IPSEC
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu11.config.f.x45 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x45 normal {m}} else {configure_entry .menu11.config.f.x45 disabled {m}}; configure_entry .menu11.config.f.x45 normal {n l}} else {configure_entry .menu11.config.f.x45 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {configure_entry .menu11.config.f.x46 normal {m}} else {configure_entry .menu11.config.f.x46 disabled {m}}
	global CONFIG_IPSEC_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu11.config.f.x47 normal {n l y}} else {configure_entry .menu11.config.f.x47 disabled {y n l}}
	global CONFIG_IPSEC_AH
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu11.config.f.x48 normal {n l y}} else {configure_entry .menu11.config.f.x48 disabled {y n l}}
	global CONFIG_IPSEC_ESP
	global CONFIG_IPSEC_AUTH_HMAC_MD5
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu11.config.f.x49 normal {n l y}} else {configure_entry .menu11.config.f.x49 disabled {y n l}}
	global CONFIG_IPSEC_AUTH_HMAC_SHA1
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu11.config.f.x50 normal {n l y}} else {configure_entry .menu11.config.f.x50 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu11.config.f.x51 normal {n l y}} else {configure_entry .menu11.config.f.x51 disabled {y n l}}
	global CONFIG_IPSEC_ENC_DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu11.config.f.x52 normal {n l y}} else {configure_entry .menu11.config.f.x52 disabled {y n l}}
	global CONFIG_IPSEC_ENC_3DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu11.config.f.x53 normal {n l y}} else {configure_entry .menu11.config.f.x53 disabled {y n l}}
	global CONFIG_IPSEC_IPCOMP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu11.config.f.x54 normal {n l y}} else {configure_entry .menu11.config.f.x54 disabled {y n l}}
	global CONFIG_IPSEC_IPCOMP_LZS
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPCOMP == 1)} then {
	configure_entry .menu11.config.f.x55 normal {n l y}} else {configure_entry .menu11.config.f.x55 disabled {y n l}}
	global CONFIG_IPSEC_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu11.config.f.x56 normal {n l y}} else {configure_entry .menu11.config.f.x56 disabled {y n l}}
	global CONFIG_IPSEC_NAT_TRAVERSAL
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu11.config.f.x57 normal {n l y}} else {configure_entry .menu11.config.f.x57 disabled {y n l}}
}


proc update_define_menu11 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NET_IPIP
	global CONFIG_IP_ALIAS
	global CONFIG_INET_RARP
	global CONFIG_IPX
	global CONFIG_ATALK
	global CONFIG_AX25
	global CONFIG_IPSEC
	global CONFIG_IPSEC_ALG
	global CONFIG_IPSEC_ALG_AES
	global CONFIG_FIREWALL
set CONFIG_FIREWALL [expr $CONFIG_FIREWALL|16]
	global CONFIG_NET_ALIAS
set CONFIG_NET_ALIAS [expr $CONFIG_NET_ALIAS|16]
	global CONFIG_INET
set CONFIG_INET [expr $CONFIG_INET|16]
	global CONFIG_IP_FORWARD
set CONFIG_IP_FORWARD [expr $CONFIG_IP_FORWARD|16]
	global CONFIG_IP_MULTICAST
set CONFIG_IP_MULTICAST [expr $CONFIG_IP_MULTICAST|16]
	global CONFIG_SYN_COOKIES
set CONFIG_SYN_COOKIES [expr $CONFIG_SYN_COOKIES|16]
	global CONFIG_IP_FIREWALL
set CONFIG_IP_FIREWALL [expr $CONFIG_IP_FIREWALL|16]
	global CONFIG_IP_FIREWALL_VERBOSE
set CONFIG_IP_FIREWALL_VERBOSE [expr $CONFIG_IP_FIREWALL_VERBOSE|16]
	global CONFIG_IP_MASQUERADE
set CONFIG_IP_MASQUERADE [expr $CONFIG_IP_MASQUERADE|16]
	global CONFIG_IP_MASQUERADE_IPAUTOFW
set CONFIG_IP_MASQUERADE_IPAUTOFW [expr $CONFIG_IP_MASQUERADE_IPAUTOFW|16]
	global CONFIG_IP_MASQUERADE_IPPORTFW
set CONFIG_IP_MASQUERADE_IPPORTFW [expr $CONFIG_IP_MASQUERADE_IPPORTFW|16]
	global CONFIG_IP_MASQUERADE_PPTP
set CONFIG_IP_MASQUERADE_PPTP [expr $CONFIG_IP_MASQUERADE_PPTP|16]
	global CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT
set CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT [expr $CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT|16]
	global DEBUG_IP_MASQUERADE_PPTP
set DEBUG_IP_MASQUERADE_PPTP [expr $DEBUG_IP_MASQUERADE_PPTP|16]
	global DEBUG_IP_MASQUERADE_PPTP_VERBOSE
set DEBUG_IP_MASQUERADE_PPTP_VERBOSE [expr $DEBUG_IP_MASQUERADE_PPTP_VERBOSE|16]
	global CONFIG_IP_MASQUERADE_IPSEC
set CONFIG_IP_MASQUERADE_IPSEC [expr $CONFIG_IP_MASQUERADE_IPSEC|16]
	global CONFIG_IP_MASQUERADE_IPSEC_NOGUESS
set CONFIG_IP_MASQUERADE_IPSEC_NOGUESS [expr $CONFIG_IP_MASQUERADE_IPSEC_NOGUESS|16]
	global DEBUG_IP_MASQUERADE_IPSEC
set DEBUG_IP_MASQUERADE_IPSEC [expr $DEBUG_IP_MASQUERADE_IPSEC|16]
	global DEBUG_IP_MASQUERADE_IPSEC_VERBOSE
set DEBUG_IP_MASQUERADE_IPSEC_VERBOSE [expr $DEBUG_IP_MASQUERADE_IPSEC_VERBOSE|16]
	global CONFIG_IP_MASQUERADE_ICMP
set CONFIG_IP_MASQUERADE_ICMP [expr $CONFIG_IP_MASQUERADE_ICMP|16]
	global CONFIG_IP_TRANSPARENT_PROXY
set CONFIG_IP_TRANSPARENT_PROXY [expr $CONFIG_IP_TRANSPARENT_PROXY|16]
	global CONFIG_IP_ALWAYS_DEFRAG
set CONFIG_IP_ALWAYS_DEFRAG [expr $CONFIG_IP_ALWAYS_DEFRAG|16]
	global CONFIG_IP_ACCT
set CONFIG_IP_ACCT [expr $CONFIG_IP_ACCT|16]
	global CONFIG_IP_ROUTER
set CONFIG_IP_ROUTER [expr $CONFIG_IP_ROUTER|16]
set CONFIG_NET_IPIP [expr $CONFIG_NET_IPIP|16]
	global CONFIG_IP_MROUTE
set CONFIG_IP_MROUTE [expr $CONFIG_IP_MROUTE|16]
set CONFIG_IP_ALIAS [expr $CONFIG_IP_ALIAS|16]
	global CONFIG_ARPD
set CONFIG_ARPD [expr $CONFIG_ARPD|16]
	global CONFIG_INET_PCTCP
set CONFIG_INET_PCTCP [expr $CONFIG_INET_PCTCP|16]
set CONFIG_INET_RARP [expr $CONFIG_INET_RARP|16]
	global CONFIG_NO_PATH_MTU_DISCOVERY
set CONFIG_NO_PATH_MTU_DISCOVERY [expr $CONFIG_NO_PATH_MTU_DISCOVERY|16]
	global CONFIG_IP_NOSR
set CONFIG_IP_NOSR [expr $CONFIG_IP_NOSR|16]
	global CONFIG_SKB_LARGE
set CONFIG_SKB_LARGE [expr $CONFIG_SKB_LARGE|16]
set CONFIG_IPX [expr $CONFIG_IPX|16]
set CONFIG_ATALK [expr $CONFIG_ATALK|16]
set CONFIG_AX25 [expr $CONFIG_AX25|16]
	global CONFIG_BRIDGE
set CONFIG_BRIDGE [expr $CONFIG_BRIDGE|16]
	global CONFIG_NETLINK
set CONFIG_NETLINK [expr $CONFIG_NETLINK|16]
	global CONFIG_RTNETLINK
set CONFIG_RTNETLINK [expr $CONFIG_RTNETLINK|16]
set CONFIG_IPSEC [expr $CONFIG_IPSEC|16]
	global CONFIG_IPSEC_IPIP
set CONFIG_IPSEC_IPIP [expr $CONFIG_IPSEC_IPIP|16]
	global CONFIG_IPSEC_AH
set CONFIG_IPSEC_AH [expr $CONFIG_IPSEC_AH|16]
	global CONFIG_IPSEC_AUTH_HMAC_MD5
set CONFIG_IPSEC_AUTH_HMAC_MD5 [expr $CONFIG_IPSEC_AUTH_HMAC_MD5|16]
	global CONFIG_IPSEC_AUTH_HMAC_SHA1
set CONFIG_IPSEC_AUTH_HMAC_SHA1 [expr $CONFIG_IPSEC_AUTH_HMAC_SHA1|16]
	global CONFIG_IPSEC_ESP
set CONFIG_IPSEC_ESP [expr $CONFIG_IPSEC_ESP|16]
	global CONFIG_IPSEC_ENC_DES
set CONFIG_IPSEC_ENC_DES [expr $CONFIG_IPSEC_ENC_DES|16]
	global CONFIG_IPSEC_ENC_3DES
set CONFIG_IPSEC_ENC_3DES [expr $CONFIG_IPSEC_ENC_3DES|16]
	global CONFIG_IPSEC_IPCOMP
set CONFIG_IPSEC_IPCOMP [expr $CONFIG_IPSEC_IPCOMP|16]
	global CONFIG_IPSEC_IPCOMP_LZS
set CONFIG_IPSEC_IPCOMP_LZS [expr $CONFIG_IPSEC_IPCOMP_LZS|16]
	global CONFIG_IPSEC_DEBUG
set CONFIG_IPSEC_DEBUG [expr $CONFIG_IPSEC_DEBUG|16]
	global CONFIG_IPSEC_NAT_TRAVERSAL
set CONFIG_IPSEC_NAT_TRAVERSAL [expr $CONFIG_IPSEC_NAT_TRAVERSAL|16]
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {
	set CONFIG_FIREWALL [expr $CONFIG_FIREWALL&15]}
	if {($CONFIG_NET == 1)} then {
	set CONFIG_NET_ALIAS [expr $CONFIG_NET_ALIAS&15]}
	if {($CONFIG_NET == 1)} then {
	set CONFIG_INET [expr $CONFIG_INET&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_FORWARD [expr $CONFIG_IP_FORWARD&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_MULTICAST [expr $CONFIG_IP_MULTICAST&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_SYN_COOKIES [expr $CONFIG_SYN_COOKIES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1)} then {
	set CONFIG_IP_FIREWALL [expr $CONFIG_IP_FIREWALL&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	set CONFIG_IP_FIREWALL_VERBOSE [expr $CONFIG_IP_FIREWALL_VERBOSE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	set CONFIG_IP_MASQUERADE [expr $CONFIG_IP_MASQUERADE&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MASQUERADE_IPAUTOFW [expr $CONFIG_IP_MASQUERADE_IPAUTOFW&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MASQUERADE_IPPORTFW [expr $CONFIG_IP_MASQUERADE_IPPORTFW&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MASQUERADE_PPTP [expr $CONFIG_IP_MASQUERADE_PPTP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {
	set CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT [expr $CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {
	set DEBUG_IP_MASQUERADE_PPTP [expr $DEBUG_IP_MASQUERADE_PPTP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1) && ($DEBUG_IP_MASQUERADE_PPTP == 1)} then {
	set DEBUG_IP_MASQUERADE_PPTP_VERBOSE [expr $DEBUG_IP_MASQUERADE_PPTP_VERBOSE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MASQUERADE_IPSEC [expr $CONFIG_IP_MASQUERADE_IPSEC&15]}
	global CONFIG_IP_MASQUERADE_IPSEC_EXPIRE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {validate_int CONFIG_IP_MASQUERADE_IPSEC_EXPIRE "$CONFIG_IP_MASQUERADE_IPSEC_EXPIRE" 30}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {
	set CONFIG_IP_MASQUERADE_IPSEC_NOGUESS [expr $CONFIG_IP_MASQUERADE_IPSEC_NOGUESS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {
	set DEBUG_IP_MASQUERADE_IPSEC [expr $DEBUG_IP_MASQUERADE_IPSEC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1) && ($DEBUG_IP_MASQUERADE_IPSEC == 1)} then {
	set DEBUG_IP_MASQUERADE_IPSEC_VERBOSE [expr $DEBUG_IP_MASQUERADE_IPSEC_VERBOSE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {
	set CONFIG_IP_MASQUERADE_ICMP [expr $CONFIG_IP_MASQUERADE_ICMP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_TRANSPARENT_PROXY [expr $CONFIG_IP_TRANSPARENT_PROXY&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	set CONFIG_IP_ALWAYS_DEFRAG [expr $CONFIG_IP_ALWAYS_DEFRAG&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_ACCT [expr $CONFIG_IP_ACCT&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_ROUTER [expr $CONFIG_IP_ROUTER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_IPIP == 2)} then {set CONFIG_NET_IPIP 1}; set CONFIG_NET_IPIP [expr $CONFIG_NET_IPIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MROUTE [expr $CONFIG_IP_MROUTE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NET_ALIAS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IP_ALIAS == 2)} then {set CONFIG_IP_ALIAS 1}; set CONFIG_IP_ALIAS [expr $CONFIG_IP_ALIAS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_NETLINK == 1)} then {
	set CONFIG_ARPD [expr $CONFIG_ARPD&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_INET_PCTCP [expr $CONFIG_INET_PCTCP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_INET_RARP == 2)} then {set CONFIG_INET_RARP 1}; set CONFIG_INET_RARP [expr $CONFIG_INET_RARP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_NO_PATH_MTU_DISCOVERY [expr $CONFIG_NO_PATH_MTU_DISCOVERY&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_NOSR [expr $CONFIG_IP_NOSR&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_SKB_LARGE [expr $CONFIG_SKB_LARGE&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IPX == 2)} then {set CONFIG_IPX 1}; set CONFIG_IPX [expr $CONFIG_IPX&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATALK == 2)} then {set CONFIG_ATALK 1}; set CONFIG_ATALK [expr $CONFIG_ATALK&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AX25 == 2)} then {set CONFIG_AX25 1}; set CONFIG_AX25 [expr $CONFIG_AX25&15]}
	global CONFIG_NETROM
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_NETROM [sync_tristate $CONFIG_NETROM $tmpvar_dep]; set CONFIG_NETROM [expr $CONFIG_NETROM&15]}
	global CONFIG_ROSE
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_ROSE [sync_tristate $CONFIG_ROSE $tmpvar_dep]; set CONFIG_ROSE [expr $CONFIG_ROSE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_BRIDGE [expr $CONFIG_BRIDGE&15]}
	if {($CONFIG_NET == 1)} then {
	set CONFIG_NETLINK [expr $CONFIG_NETLINK&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETLINK == 1)} then {
	set CONFIG_RTNETLINK [expr $CONFIG_RTNETLINK&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IPSEC == 2)} then {set CONFIG_IPSEC 1}; set CONFIG_IPSEC [expr $CONFIG_IPSEC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_IPIP [expr $CONFIG_IPSEC_IPIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPIP == 1)} then {	global CONSTANT_Y
set CONFIG_IPSEC_ALG $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPIP == 1)} then {	global CONSTANT_Y
set CONFIG_IPSEC_ALG_AES $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_AH [expr $CONFIG_IPSEC_AH&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_AUTH_HMAC_MD5 [expr $CONFIG_IPSEC_AUTH_HMAC_MD5&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_AUTH_HMAC_SHA1 [expr $CONFIG_IPSEC_AUTH_HMAC_SHA1&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_ESP [expr $CONFIG_IPSEC_ESP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_ENC_DES [expr $CONFIG_IPSEC_ENC_DES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_ENC_3DES [expr $CONFIG_IPSEC_ENC_3DES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_IPCOMP [expr $CONFIG_IPSEC_IPCOMP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPCOMP == 1)} then {
	set CONFIG_IPSEC_IPCOMP_LZS [expr $CONFIG_IPSEC_IPCOMP_LZS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_DEBUG [expr $CONFIG_IPSEC_DEBUG&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_NAT_TRAVERSAL [expr $CONFIG_IPSEC_NAT_TRAVERSAL&15]}
}


menu_option menu12 12 "Network device support"
proc menu12 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 12}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 12]]
	message $w.m -width 400 -aspect 300 -text \
		"Network device support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Network device support" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu13 .menu13 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu11 .menu11 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 12 0 "Network device support" CONFIG_NETDEVICES
	tristate $w.config.f 12 1 "Dummy net driver support" CONFIG_DUMMY
	tristate $w.config.f 12 2 "SLIP (serial line) support" CONFIG_SLIP
	bool $w.config.f 12 3 " CSLIP compressed headers" CONFIG_SLIP_COMPRESSED
	bool $w.config.f 12 4 " Keepalive and linefill" CONFIG_SLIP_SMART
	bool $w.config.f 12 5 " Six bit SLIP encapsulation" CONFIG_SLIP_MODE_SLIP6
	tristate $w.config.f 12 6 "PPP (point-to-point) support" CONFIG_PPP
	comment $w.config.f 12 7 "CCP compressors for PPP are only built as modules."
	tristate $w.config.f 12 8 "EQL (serial line load balancing) support" CONFIG_EQUALIZER
	bool $w.config.f 12 9 "Cirrus Logic Crystal LAN cs8900 ethernet" CONFIG_UCCS8900
	bool $w.config.f 12 10 "Hardware byte-swapping support for cs8900 ethernet" CONFIG_UCCS8900_HW_SWAP
	hex $w.config.f 12 11 "Base Address for cs8900 ethernet" CS8900_BASE
	bool $w.config.f 12 12 "SMC 9194 ethernet" CONFIG_SMC9194
	bool $w.config.f 12 13 "SMC 91C111 ethernet" CONFIG_SMC91111
	hex $w.config.f 12 14 "PIO port for SMC91111" CONFIG_SMC91111_PIO
	hex $w.config.f 12 15 "IRQ of SMC91111" CONFIG_SMC91111_IRQ
	hex $w.config.f 12 16 "Base address of SMC91111" CONFIG_SMC91111_BASE_ADD
	bool $w.config.f 12 17 "NE2000/NE1000 ISA ethernet" CONFIG_NE2000
	bool $w.config.f 12 18 "FEC ethernet controller (of ColdFire 5272)" CONFIG_FEC
	bool $w.config.f 12 19 "PCI NE2000 support" CONFIG_NE2K_PCI
	bool $w.config.f 12 20 "DECchip Tulip (dc21x4x) PCI support" CONFIG_DEC_ELCP
	bool $w.config.f 12 21 "Open Ethernet MAC support" CONFIG_OPEN_ETH
	hex $w.config.f 12 22 "IRQ of Open-Eth" IRQ_ETH_0
	hex $w.config.f 12 23 "Base address of Open-Eth" ETH_BASE_ADD
	hex $w.config.f 12 24 "MAC-Address of Open-Eth, byte 0" MACADDR0
	hex $w.config.f 12 25 "MAC-Address of Open-Eth, byte 1" MACADDR1
	hex $w.config.f 12 26 "MAC-Address of Open-Eth, byte 2" MACADDR2
	hex $w.config.f 12 27 "MAC-Address of Open-Eth, byte 3" MACADDR3
	hex $w.config.f 12 28 "MAC-Address of Open-Eth, byte 4" MACADDR4
	hex $w.config.f 12 29 "MAC-Address of Open-Eth, byte 5" MACADDR5



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu12 {} {
	global CONFIG_NET
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu12.config.f.x0 normal {n l y}} else {configure_entry .menu12.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_DUMMY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x1 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu12.config.f.x1 normal {m}} else {configure_entry .menu12.config.f.x1 disabled {m}}; configure_entry .menu12.config.f.x1 normal {n l}} else {configure_entry .menu12.config.f.x1 disabled {y n m l}}
	global CONFIG_SLIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu12.config.f.x2 normal {m}} else {configure_entry .menu12.config.f.x2 disabled {m}}; configure_entry .menu12.config.f.x2 normal {n l}} else {configure_entry .menu12.config.f.x2 disabled {y n m l}}
	global CONFIG_SLIP_COMPRESSED
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	configure_entry .menu12.config.f.x3 normal {n l y}} else {configure_entry .menu12.config.f.x3 disabled {y n l}}
	global CONFIG_SLIP_SMART
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	configure_entry .menu12.config.f.x4 normal {n l y}} else {configure_entry .menu12.config.f.x4 disabled {y n l}}
	global CONFIG_SLIP_MODE_SLIP6
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	configure_entry .menu12.config.f.x5 normal {n l y}} else {configure_entry .menu12.config.f.x5 disabled {y n l}}
	global CONFIG_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x6 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu12.config.f.x6 normal {m}} else {configure_entry .menu12.config.f.x6 disabled {m}}; configure_entry .menu12.config.f.x6 normal {n l}} else {configure_entry .menu12.config.f.x6 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0)} then {configure_entry .menu12.config.f.x7 normal {m}} else {configure_entry .menu12.config.f.x7 disabled {m}}
	global CONFIG_EQUALIZER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x8 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu12.config.f.x8 normal {m}} else {configure_entry .menu12.config.f.x8 disabled {m}}; configure_entry .menu12.config.f.x8 normal {n l}} else {configure_entry .menu12.config.f.x8 disabled {y n m l}}
	global CONFIG_UCCS8900
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x9 normal {n l y}} else {configure_entry .menu12.config.f.x9 disabled {y n l}}
	global CONFIG_UCCS8900_HW_SWAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0)} then {
	configure_entry .menu12.config.f.x10 normal {n l y}} else {configure_entry .menu12.config.f.x10 disabled {y n l}}
	global CS8900_BASE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0)} then {.menu12.config.f.x11.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x11.l configure -state normal; } else {.menu12.config.f.x11.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x11.l configure -state disabled}
	global CONFIG_SMC9194
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x12 normal {n l y}} else {configure_entry .menu12.config.f.x12 disabled {y n l}}
	global CONFIG_SMC91111
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x13 normal {n l y}} else {configure_entry .menu12.config.f.x13 disabled {y n l}}
	global CONFIG_SMC91111_PIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SMC91111 == 1)} then {.menu12.config.f.x14.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x14.l configure -state normal; } else {.menu12.config.f.x14.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x14.l configure -state disabled}
	global CONFIG_SMC91111_IRQ
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SMC91111 == 1)} then {.menu12.config.f.x15.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x15.l configure -state normal; } else {.menu12.config.f.x15.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x15.l configure -state disabled}
	global CONFIG_SMC91111_BASE_ADD
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SMC91111 == 1)} then {.menu12.config.f.x16.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x16.l configure -state normal; } else {.menu12.config.f.x16.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x16.l configure -state disabled}
	global CONFIG_NE2000
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x17 normal {n l y}} else {configure_entry .menu12.config.f.x17 disabled {y n l}}
	global CONFIG_FEC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x18 normal {n l y}} else {configure_entry .menu12.config.f.x18 disabled {y n l}}
	global CONFIG_PCI
	global CONFIG_NE2K_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu12.config.f.x19 normal {n l y}} else {configure_entry .menu12.config.f.x19 disabled {y n l}}
	global CONFIG_DEC_ELCP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu12.config.f.x20 normal {n l y}} else {configure_entry .menu12.config.f.x20 disabled {y n l}}
	global CONFIG_OPEN_ETH
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu12.config.f.x21 normal {n l y}} else {configure_entry .menu12.config.f.x21 disabled {y n l}}
	global IRQ_ETH_0
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {.menu12.config.f.x22.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x22.l configure -state normal; } else {.menu12.config.f.x22.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x22.l configure -state disabled}
	global ETH_BASE_ADD
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {.menu12.config.f.x23.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x23.l configure -state normal; } else {.menu12.config.f.x23.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x23.l configure -state disabled}
	global MACADDR0
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {.menu12.config.f.x24.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x24.l configure -state normal; } else {.menu12.config.f.x24.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x24.l configure -state disabled}
	global MACADDR1
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {.menu12.config.f.x25.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x25.l configure -state normal; } else {.menu12.config.f.x25.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x25.l configure -state disabled}
	global MACADDR2
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {.menu12.config.f.x26.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x26.l configure -state normal; } else {.menu12.config.f.x26.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x26.l configure -state disabled}
	global MACADDR3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {.menu12.config.f.x27.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x27.l configure -state normal; } else {.menu12.config.f.x27.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x27.l configure -state disabled}
	global MACADDR4
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {.menu12.config.f.x28.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x28.l configure -state normal; } else {.menu12.config.f.x28.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x28.l configure -state disabled}
	global MACADDR5
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {.menu12.config.f.x29.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x29.l configure -state normal; } else {.menu12.config.f.x29.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x29.l configure -state disabled}
}


proc update_define_menu12 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_DUMMY
	global CONFIG_SLIP
	global CONFIG_PPP
	global CONFIG_EQUALIZER
	global CONFIG_NETDEVICES
set CONFIG_NETDEVICES [expr $CONFIG_NETDEVICES|16]
set CONFIG_DUMMY [expr $CONFIG_DUMMY|16]
set CONFIG_SLIP [expr $CONFIG_SLIP|16]
	global CONFIG_SLIP_COMPRESSED
set CONFIG_SLIP_COMPRESSED [expr $CONFIG_SLIP_COMPRESSED|16]
	global CONFIG_SLIP_SMART
set CONFIG_SLIP_SMART [expr $CONFIG_SLIP_SMART|16]
	global CONFIG_SLIP_MODE_SLIP6
set CONFIG_SLIP_MODE_SLIP6 [expr $CONFIG_SLIP_MODE_SLIP6|16]
set CONFIG_PPP [expr $CONFIG_PPP|16]
set CONFIG_EQUALIZER [expr $CONFIG_EQUALIZER|16]
	global CONFIG_UCCS8900
set CONFIG_UCCS8900 [expr $CONFIG_UCCS8900|16]
	global CONFIG_UCCS8900_HW_SWAP
set CONFIG_UCCS8900_HW_SWAP [expr $CONFIG_UCCS8900_HW_SWAP|16]
	global CONFIG_SMC9194
set CONFIG_SMC9194 [expr $CONFIG_SMC9194|16]
	global CONFIG_SMC91111
set CONFIG_SMC91111 [expr $CONFIG_SMC91111|16]
	global CONFIG_NE2000
set CONFIG_NE2000 [expr $CONFIG_NE2000|16]
	global CONFIG_FEC
set CONFIG_FEC [expr $CONFIG_FEC|16]
	global CONFIG_NE2K_PCI
set CONFIG_NE2K_PCI [expr $CONFIG_NE2K_PCI|16]
	global CONFIG_DEC_ELCP
set CONFIG_DEC_ELCP [expr $CONFIG_DEC_ELCP|16]
	global CONFIG_OPEN_ETH
set CONFIG_OPEN_ETH [expr $CONFIG_OPEN_ETH|16]
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {
	set CONFIG_NETDEVICES [expr $CONFIG_NETDEVICES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DUMMY == 2)} then {set CONFIG_DUMMY 1}; set CONFIG_DUMMY [expr $CONFIG_DUMMY&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SLIP == 2)} then {set CONFIG_SLIP 1}; set CONFIG_SLIP [expr $CONFIG_SLIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	set CONFIG_SLIP_COMPRESSED [expr $CONFIG_SLIP_COMPRESSED&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	set CONFIG_SLIP_SMART [expr $CONFIG_SLIP_SMART&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	set CONFIG_SLIP_MODE_SLIP6 [expr $CONFIG_SLIP_MODE_SLIP6&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_PPP == 2)} then {set CONFIG_PPP 1}; set CONFIG_PPP [expr $CONFIG_PPP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_EQUALIZER == 2)} then {set CONFIG_EQUALIZER 1}; set CONFIG_EQUALIZER [expr $CONFIG_EQUALIZER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_UCCS8900 [expr $CONFIG_UCCS8900&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0)} then {
	set CONFIG_UCCS8900_HW_SWAP [expr $CONFIG_UCCS8900_HW_SWAP&15]}
	global CS8900_BASE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0)} then {validate_hex CS8900_BASE "$CS8900_BASE" 0x10000300}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_SMC9194 [expr $CONFIG_SMC9194&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_SMC91111 [expr $CONFIG_SMC91111&15]}
	global CONFIG_SMC91111_PIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SMC91111 == 1)} then {validate_hex CONFIG_SMC91111_PIO "$CONFIG_SMC91111_PIO" 0x04}
	global CONFIG_SMC91111_IRQ
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SMC91111 == 1)} then {validate_hex CONFIG_SMC91111_IRQ "$CONFIG_SMC91111_IRQ" 0x04}
	global CONFIG_SMC91111_BASE_ADD
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SMC91111 == 1)} then {validate_hex CONFIG_SMC91111_BASE_ADD "$CONFIG_SMC91111_BASE_ADD" 0x20000000}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_NE2000 [expr $CONFIG_NE2000&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_FEC [expr $CONFIG_FEC&15]}
	global CONFIG_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {
	set CONFIG_NE2K_PCI [expr $CONFIG_NE2K_PCI&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {
	set CONFIG_DEC_ELCP [expr $CONFIG_DEC_ELCP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_OPEN_ETH [expr $CONFIG_OPEN_ETH&15]}
	global IRQ_ETH_0
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {validate_hex IRQ_ETH_0 "$IRQ_ETH_0" 0x0C}
	global ETH_BASE_ADD
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {validate_hex ETH_BASE_ADD "$ETH_BASE_ADD" 0xB0000000}
	global MACADDR0
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {validate_hex MACADDR0 "$MACADDR0" 0xDE}
	global MACADDR1
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {validate_hex MACADDR1 "$MACADDR1" 0xAD}
	global MACADDR2
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {validate_hex MACADDR2 "$MACADDR2" 0xBE}
	global MACADDR3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {validate_hex MACADDR3 "$MACADDR3" 0xEF}
	global MACADDR4
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {validate_hex MACADDR4 "$MACADDR4" 0x08}
	global MACADDR5
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {validate_hex MACADDR5 "$MACADDR5" 0x15}
}


menu_option menu13 13 "Filesystems"
proc menu13 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 13}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 13]]
	message $w.m -width 400 -aspect 300 -text \
		"Filesystems"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Filesystems" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 13"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; menu14 .menu14 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 13; menu12 .menu12 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 13 0 "Quota support" CONFIG_QUOTA
	tristate $w.config.f 13 1 "Minix fs support" CONFIG_MINIX_FS
	tristate $w.config.f 13 2 "Extended fs support" CONFIG_EXT_FS
	tristate $w.config.f 13 3 "Second extended fs support" CONFIG_EXT2_FS
	tristate $w.config.f 13 4 "xiafs filesystem support" CONFIG_XIA_FS
	tristate $w.config.f 13 5 "Native language support (Needed for FAT and ISO9660)" CONFIG_NLS
	dep_tristate $w.config.f 13 6 "  ISO9660 cdrom filesystem support" CONFIG_ISO9660_FS
	dep_tristate $w.config.f 13 7 "  DOS FAT fs support" CONFIG_FAT_FS
	dep_tristate $w.config.f 13 8 "    MSDOS fs support" CONFIG_MSDOS_FS
	dep_tristate $w.config.f 13 9 "      umsdos: Unix like fs on top of std MSDOS FAT fs" CONFIG_UMSDOS_FS
	dep_tristate $w.config.f 13 10 "      VFAT (Windows-95) fs support" CONFIG_VFAT_FS
	submenu $w.config.f 13 11 "Select available code pages" 14
	bool $w.config.f 13 12 "/proc filesystem support" CONFIG_PROC_FS
	tristate $w.config.f 13 13 "NFS filesystem support" CONFIG_NFS_FS
	bool $w.config.f 13 14 "  Root file system on NFS" CONFIG_ROOT_NFS
	bool $w.config.f 13 15 "    BOOTP support" CONFIG_RNFS_BOOTP
	bool $w.config.f 13 16 "    RARP support" CONFIG_RNFS_RARP
	tristate $w.config.f 13 17 "SMB filesystem support (to mount WfW shares etc..)" CONFIG_SMB_FS
	bool $w.config.f 13 18 "  SMB Win95 bug work-around" CONFIG_SMB_WIN95
	tristate $w.config.f 13 19 "NCP filesystem support (to mount NetWare volumes)" CONFIG_NCP_FS
	bool $w.config.f 13 20 "  Packet signatures" CONFIG_NCPFS_PACKET_SIGNING
	bool $w.config.f 13 21 "  Proprietary file locking" CONFIG_NCPFS_IOCTL_LOCKING
	bool $w.config.f 13 22 "  Clear remove/delete inhibit when needed" CONFIG_NCPFS_STRONG
	bool $w.config.f 13 23 "  Use NFS namespace if available" CONFIG_NCPFS_NFS_NS
	bool $w.config.f 13 24 "  Use LONG (OS/2) namespace if available" CONFIG_NCPFS_OS2_NS
	bool $w.config.f 13 25 "  Allow mounting of volume subdirectories" CONFIG_NCPFS_MOUNT_SUBDIR
	tristate $w.config.f 13 26 "OS/2 HPFS filesystem support (read only)" CONFIG_HPFS_FS
	tristate $w.config.f 13 27 "System V and Coherent filesystem support" CONFIG_SYSV_FS
	tristate $w.config.f 13 28 "Kernel automounter support (EXPERIMENTAL)" CONFIG_AUTOFS_FS
	tristate $w.config.f 13 29 "Amiga FFS filesystem support (EXPERIMENTAL)" CONFIG_AFFS_FS
	tristate $w.config.f 13 30 "ROM filesystem support" CONFIG_ROMFS_FS
	tristate $w.config.f 13 31 "Journaling FLASH filesystem support" CONFIG_JFFS_FS
	tristate $w.config.f 13 32 "UFS filesystem support (read only)" CONFIG_UFS_FS
	bool $w.config.f 13 33 "  BSD disklabel (FreeBSD partition tables) support" CONFIG_BSD_DISKLABEL
	bool $w.config.f 13 34 "  SMD disklabel (Sun partition tables) support" CONFIG_SMD_DISKLABEL



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu13 {} {
	global CONFIG_MINIX_FS
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x1 normal {m}} else {configure_entry .menu13.config.f.x1 disabled {m}}
	global CONFIG_EXT_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x2 normal {m}} else {configure_entry .menu13.config.f.x2 disabled {m}}
	global CONFIG_EXT2_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x3 normal {m}} else {configure_entry .menu13.config.f.x3 disabled {m}}
	global CONFIG_XIA_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x4 normal {m}} else {configure_entry .menu13.config.f.x4 disabled {m}}
	global CONFIG_NLS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x5 normal {m}} else {configure_entry .menu13.config.f.x5 disabled {m}}
	global CONFIG_ISO9660_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_ISO9660_FS [sync_tristate $CONFIG_ISO9660_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x6 disabled {y}} else {configure_entry .menu13.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x6 disabled {m}} else {configure_entry .menu13.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x6 normal {m}} else {configure_entry .menu13.config.f.x6 disabled {m}}; configure_entry .menu13.config.f.x6 normal {n l}} else {configure_entry .menu13.config.f.x6 disabled {y n m l}}
	global CONFIG_FAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_FAT_FS [sync_tristate $CONFIG_FAT_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x7 disabled {y}} else {configure_entry .menu13.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x7 disabled {m}} else {configure_entry .menu13.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x7 normal {m}} else {configure_entry .menu13.config.f.x7 disabled {m}}; configure_entry .menu13.config.f.x7 normal {n l}} else {configure_entry .menu13.config.f.x7 disabled {y n m l}}
	global CONFIG_MSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]];set CONFIG_MSDOS_FS [sync_tristate $CONFIG_MSDOS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x8 disabled {y}} else {configure_entry .menu13.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x8 disabled {m}} else {configure_entry .menu13.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x8 normal {m}} else {configure_entry .menu13.config.f.x8 disabled {m}}; configure_entry .menu13.config.f.x8 normal {n l}} else {configure_entry .menu13.config.f.x8 disabled {y n m l}}
	global CONFIG_UMSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_MSDOS_FS == 1 || $CONFIG_MSDOS_FS == 2 || $CONFIG_MSDOS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MSDOS_FS]];set CONFIG_UMSDOS_FS [sync_tristate $CONFIG_UMSDOS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x9 disabled {y}} else {configure_entry .menu13.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x9 disabled {m}} else {configure_entry .menu13.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x9 normal {m}} else {configure_entry .menu13.config.f.x9 disabled {m}}; configure_entry .menu13.config.f.x9 normal {n l}} else {configure_entry .menu13.config.f.x9 disabled {y n m l}}
	global CONFIG_VFAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]];set CONFIG_VFAT_FS [sync_tristate $CONFIG_VFAT_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x10 disabled {y}} else {configure_entry .menu13.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x10 disabled {m}} else {configure_entry .menu13.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x10 normal {m}} else {configure_entry .menu13.config.f.x10 disabled {m}}; configure_entry .menu13.config.f.x10 normal {n l}} else {configure_entry .menu13.config.f.x10 disabled {y n m l}}
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2)} then {configure_entry .menu13.config.f.x11 normal {m}} else {configure_entry .menu13.config.f.x11 disabled {m}}
	global CONFIG_INET
	global CONFIG_NFS_FS
	if {($CONFIG_INET == 1)} then {
	configure_entry .menu13.config.f.x13 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x13 normal {m}} else {configure_entry .menu13.config.f.x13 disabled {m}}; configure_entry .menu13.config.f.x13 normal {n l}} else {configure_entry .menu13.config.f.x13 disabled {y n m l}}
	global CONFIG_ROOT_NFS
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1)} then {
	configure_entry .menu13.config.f.x14 normal {n l y}} else {configure_entry .menu13.config.f.x14 disabled {y n l}}
	global CONFIG_RNFS_BOOTP
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {
	configure_entry .menu13.config.f.x15 normal {n l y}} else {configure_entry .menu13.config.f.x15 disabled {y n l}}
	global CONFIG_RNFS_RARP
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {
	configure_entry .menu13.config.f.x16 normal {n l y}} else {configure_entry .menu13.config.f.x16 disabled {y n l}}
	global CONFIG_SMB_FS
	if {($CONFIG_INET == 1)} then {
	configure_entry .menu13.config.f.x17 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x17 normal {m}} else {configure_entry .menu13.config.f.x17 disabled {m}}; configure_entry .menu13.config.f.x17 normal {n l}} else {configure_entry .menu13.config.f.x17 disabled {y n m l}}
	global CONFIG_SMB_WIN95
	if {($CONFIG_INET == 1) && ($CONFIG_SMB_FS != 0)} then {
	configure_entry .menu13.config.f.x18 normal {n l y}} else {configure_entry .menu13.config.f.x18 disabled {y n l}}
	global CONFIG_IPX
	global CONFIG_NCP_FS
	if {($CONFIG_IPX != 0)} then {
	configure_entry .menu13.config.f.x19 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x19 normal {m}} else {configure_entry .menu13.config.f.x19 disabled {m}}; configure_entry .menu13.config.f.x19 normal {n l}} else {configure_entry .menu13.config.f.x19 disabled {y n m l}}
	global CONFIG_NCPFS_PACKET_SIGNING
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu13.config.f.x20 normal {n l y}} else {configure_entry .menu13.config.f.x20 disabled {y n l}}
	global CONFIG_NCPFS_IOCTL_LOCKING
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu13.config.f.x21 normal {n l y}} else {configure_entry .menu13.config.f.x21 disabled {y n l}}
	global CONFIG_NCPFS_STRONG
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu13.config.f.x22 normal {n l y}} else {configure_entry .menu13.config.f.x22 disabled {y n l}}
	global CONFIG_NCPFS_NFS_NS
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu13.config.f.x23 normal {n l y}} else {configure_entry .menu13.config.f.x23 disabled {y n l}}
	global CONFIG_NCPFS_OS2_NS
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu13.config.f.x24 normal {n l y}} else {configure_entry .menu13.config.f.x24 disabled {y n l}}
	global CONFIG_NCPFS_MOUNT_SUBDIR
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu13.config.f.x25 normal {n l y}} else {configure_entry .menu13.config.f.x25 disabled {y n l}}
	global CONFIG_HPFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x26 normal {m}} else {configure_entry .menu13.config.f.x26 disabled {m}}
	global CONFIG_SYSV_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x27 normal {m}} else {configure_entry .menu13.config.f.x27 disabled {m}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_AUTOFS_FS
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu13.config.f.x28 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x28 normal {m}} else {configure_entry .menu13.config.f.x28 disabled {m}}; configure_entry .menu13.config.f.x28 normal {n l}} else {configure_entry .menu13.config.f.x28 disabled {y n m l}}
	global CONFIG_AFFS_FS
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu13.config.f.x29 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x29 normal {m}} else {configure_entry .menu13.config.f.x29 disabled {m}}; configure_entry .menu13.config.f.x29 normal {n l}} else {configure_entry .menu13.config.f.x29 disabled {y n m l}}
	global CONFIG_ROMFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x30 normal {m}} else {configure_entry .menu13.config.f.x30 disabled {m}}
	global CONFIG_JFFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x31 normal {m}} else {configure_entry .menu13.config.f.x31 disabled {m}}
	global CONFIG_UFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x32 normal {m}} else {configure_entry .menu13.config.f.x32 disabled {m}}
	global CONFIG_BSD_DISKLABEL
	if {($CONFIG_UFS_FS != 0)} then {
	configure_entry .menu13.config.f.x33 normal {n l y}} else {configure_entry .menu13.config.f.x33 disabled {y n l}}
	global CONFIG_SMD_DISKLABEL
	if {($CONFIG_UFS_FS != 0)} then {
	configure_entry .menu13.config.f.x34 normal {n l y}} else {configure_entry .menu13.config.f.x34 disabled {y n l}}
}


proc update_define_menu13 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MINIX_FS
	global CONFIG_EXT_FS
	global CONFIG_EXT2_FS
	global CONFIG_XIA_FS
	global CONFIG_NLS
	global CONFIG_NFS_FS
	global CONFIG_SMB_FS
	global CONFIG_NCP_FS
	global CONFIG_HPFS_FS
	global CONFIG_SYSV_FS
	global CONFIG_AUTOFS_FS
	global CONFIG_AFFS_FS
	global CONFIG_AMIGA_PARTITION
	global CONFIG_ROMFS_FS
	global CONFIG_JFFS_FS
	global CONFIG_UFS_FS
set CONFIG_NFS_FS [expr $CONFIG_NFS_FS|16]
	global CONFIG_ROOT_NFS
set CONFIG_ROOT_NFS [expr $CONFIG_ROOT_NFS|16]
	global CONFIG_RNFS_BOOTP
set CONFIG_RNFS_BOOTP [expr $CONFIG_RNFS_BOOTP|16]
	global CONFIG_RNFS_RARP
set CONFIG_RNFS_RARP [expr $CONFIG_RNFS_RARP|16]
set CONFIG_SMB_FS [expr $CONFIG_SMB_FS|16]
	global CONFIG_SMB_WIN95
set CONFIG_SMB_WIN95 [expr $CONFIG_SMB_WIN95|16]
set CONFIG_NCP_FS [expr $CONFIG_NCP_FS|16]
	global CONFIG_NCPFS_PACKET_SIGNING
set CONFIG_NCPFS_PACKET_SIGNING [expr $CONFIG_NCPFS_PACKET_SIGNING|16]
	global CONFIG_NCPFS_IOCTL_LOCKING
set CONFIG_NCPFS_IOCTL_LOCKING [expr $CONFIG_NCPFS_IOCTL_LOCKING|16]
	global CONFIG_NCPFS_STRONG
set CONFIG_NCPFS_STRONG [expr $CONFIG_NCPFS_STRONG|16]
	global CONFIG_NCPFS_NFS_NS
set CONFIG_NCPFS_NFS_NS [expr $CONFIG_NCPFS_NFS_NS|16]
	global CONFIG_NCPFS_OS2_NS
set CONFIG_NCPFS_OS2_NS [expr $CONFIG_NCPFS_OS2_NS|16]
	global CONFIG_NCPFS_MOUNT_SUBDIR
set CONFIG_NCPFS_MOUNT_SUBDIR [expr $CONFIG_NCPFS_MOUNT_SUBDIR|16]
set CONFIG_AUTOFS_FS [expr $CONFIG_AUTOFS_FS|16]
set CONFIG_AFFS_FS [expr $CONFIG_AFFS_FS|16]
	global CONFIG_BSD_DISKLABEL
set CONFIG_BSD_DISKLABEL [expr $CONFIG_BSD_DISKLABEL|16]
	global CONFIG_SMD_DISKLABEL
set CONFIG_SMD_DISKLABEL [expr $CONFIG_SMD_DISKLABEL|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_MINIX_FS == 2)} then {set CONFIG_MINIX_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_EXT_FS == 2)} then {set CONFIG_EXT_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_EXT2_FS == 2)} then {set CONFIG_EXT2_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_XIA_FS == 2)} then {set CONFIG_XIA_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_NLS == 2)} then {set CONFIG_NLS 1}}
	global CONFIG_ISO9660_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_ISO9660_FS [sync_tristate $CONFIG_ISO9660_FS $tmpvar_dep]; set CONFIG_ISO9660_FS [expr $CONFIG_ISO9660_FS&15]}
	global CONFIG_FAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_FAT_FS [sync_tristate $CONFIG_FAT_FS $tmpvar_dep]; set CONFIG_FAT_FS [expr $CONFIG_FAT_FS&15]}
	global CONFIG_MSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]]; set CONFIG_MSDOS_FS [sync_tristate $CONFIG_MSDOS_FS $tmpvar_dep]; set CONFIG_MSDOS_FS [expr $CONFIG_MSDOS_FS&15]}
	global CONFIG_UMSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_MSDOS_FS == 1 || $CONFIG_MSDOS_FS == 2 || $CONFIG_MSDOS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MSDOS_FS]]; set CONFIG_UMSDOS_FS [sync_tristate $CONFIG_UMSDOS_FS $tmpvar_dep]; set CONFIG_UMSDOS_FS [expr $CONFIG_UMSDOS_FS&15]}
	global CONFIG_VFAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]]; set CONFIG_VFAT_FS [sync_tristate $CONFIG_VFAT_FS $tmpvar_dep]; set CONFIG_VFAT_FS [expr $CONFIG_VFAT_FS&15]}
	global CONFIG_INET
	if {($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NFS_FS == 2)} then {set CONFIG_NFS_FS 1}; set CONFIG_NFS_FS [expr $CONFIG_NFS_FS&15]}
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1)} then {
	set CONFIG_ROOT_NFS [expr $CONFIG_ROOT_NFS&15]}
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {
	set CONFIG_RNFS_BOOTP [expr $CONFIG_RNFS_BOOTP&15]}
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {
	set CONFIG_RNFS_RARP [expr $CONFIG_RNFS_RARP&15]}
	if {($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SMB_FS == 2)} then {set CONFIG_SMB_FS 1}; set CONFIG_SMB_FS [expr $CONFIG_SMB_FS&15]}
	if {($CONFIG_INET == 1) && ($CONFIG_SMB_FS != 0)} then {
	set CONFIG_SMB_WIN95 [expr $CONFIG_SMB_WIN95&15]}
	global CONFIG_IPX
	if {($CONFIG_IPX != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NCP_FS == 2)} then {set CONFIG_NCP_FS 1}; set CONFIG_NCP_FS [expr $CONFIG_NCP_FS&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_PACKET_SIGNING [expr $CONFIG_NCPFS_PACKET_SIGNING&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_IOCTL_LOCKING [expr $CONFIG_NCPFS_IOCTL_LOCKING&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_STRONG [expr $CONFIG_NCPFS_STRONG&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_NFS_NS [expr $CONFIG_NCPFS_NFS_NS&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_OS2_NS [expr $CONFIG_NCPFS_OS2_NS&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_MOUNT_SUBDIR [expr $CONFIG_NCPFS_MOUNT_SUBDIR&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_HPFS_FS == 2)} then {set CONFIG_HPFS_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_SYSV_FS == 2)} then {set CONFIG_SYSV_FS 1}}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AUTOFS_FS == 2)} then {set CONFIG_AUTOFS_FS 1}; set CONFIG_AUTOFS_FS [expr $CONFIG_AUTOFS_FS&15]}
	if {($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AFFS_FS == 2)} then {set CONFIG_AFFS_FS 1}; set CONFIG_AFFS_FS [expr $CONFIG_AFFS_FS&15]}
	if {($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_AFFS_FS != 0)} then {	global CONSTANT_Y
set CONFIG_AMIGA_PARTITION $CONSTANT_Y }

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_ROMFS_FS == 2)} then {set CONFIG_ROMFS_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_JFFS_FS == 2)} then {set CONFIG_JFFS_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_UFS_FS == 2)} then {set CONFIG_UFS_FS 1}}
	if {($CONFIG_UFS_FS != 0)} then {
	set CONFIG_BSD_DISKLABEL [expr $CONFIG_BSD_DISKLABEL&15]}
	if {($CONFIG_UFS_FS != 0)} then {
	set CONFIG_SMD_DISKLABEL [expr $CONFIG_SMD_DISKLABEL&15]}
}


proc menu14 {w title} {
	set oldFocus [focus]
	catch {focus .menu13}
	catch {destroy $w; unregister_active 14}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 14]]
	message $w.m -width 400 -aspect 300 -text \
		"Select available code pages"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Select available code pages" 

	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 14"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 14; catch {destroy .menu13}; unregister_active 13; menu15 .menu15 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 14; menu13 .menu13 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 14 0 "Codepage 437 (United States, Canada)" CONFIG_NLS_CODEPAGE_437
	dep_tristate $w.config.f 14 1 "Codepage 737 (Greek)" CONFIG_NLS_CODEPAGE_737
	dep_tristate $w.config.f 14 2 "Codepage 775 (Baltic Rim)" CONFIG_NLS_CODEPAGE_775
	dep_tristate $w.config.f 14 3 "Codepage 850 (Europe)" CONFIG_NLS_CODEPAGE_850
	dep_tristate $w.config.f 14 4 "Codepage 852 (Central/Eastern Europe)" CONFIG_NLS_CODEPAGE_852
	dep_tristate $w.config.f 14 5 "Codepage 855 (Cyrillic)" CONFIG_NLS_CODEPAGE_855
	dep_tristate $w.config.f 14 6 "Codepage 857 (Turkish)" CONFIG_NLS_CODEPAGE_857
	dep_tristate $w.config.f 14 7 "Codepage 860 (Portugese)" CONFIG_NLS_CODEPAGE_860
	dep_tristate $w.config.f 14 8 "Codepage 861 (Icelandic)" CONFIG_NLS_CODEPAGE_861
	dep_tristate $w.config.f 14 9 "Codepage 862 (Hebrew)" CONFIG_NLS_CODEPAGE_862
	dep_tristate $w.config.f 14 10 "Codepage 863 (Canadian French)" CONFIG_NLS_CODEPAGE_863
	dep_tristate $w.config.f 14 11 "Codepage 864 (Arabic)" CONFIG_NLS_CODEPAGE_864
	dep_tristate $w.config.f 14 12 "Codepage 865 (Nordic European)" CONFIG_NLS_CODEPAGE_865
	dep_tristate $w.config.f 14 13 "Codepage 866 (Cyrillic/Russian)" CONFIG_NLS_CODEPAGE_866
	dep_tristate $w.config.f 14 14 "Codepage 869 (Greek)" CONFIG_NLS_CODEPAGE_869
	dep_tristate $w.config.f 14 15 "Codepage 874 (Thai)" CONFIG_NLS_CODEPAGE_874
	dep_tristate $w.config.f 14 16 "NLS ISO 8859-1 (Latin 1; Western Europe)" CONFIG_NLS_ISO8859_1
	dep_tristate $w.config.f 14 17 "NLS ISO 8859-2 (Latin 2; Slavic/Central European)" CONFIG_NLS_ISO8859_2
	dep_tristate $w.config.f 14 18 "NLS ISO 8859-3 (Latin 3; Esperanto, Galician, Maltese, Turkish)" CONFIG_NLS_ISO8859_3
	dep_tristate $w.config.f 14 19 "NLS ISO 8859-4 (Latin 4; Estonian, Latvian, Lithuanian)" CONFIG_NLS_ISO8859_4
	dep_tristate $w.config.f 14 20 "NLS ISO 8859-5 (Cyrillic)" CONFIG_NLS_ISO8859_5
	dep_tristate $w.config.f 14 21 "NLS ISO 8859-6 (Arabic)" CONFIG_NLS_ISO8859_6
	dep_tristate $w.config.f 14 22 "NLS ISO 8859-7 (Modern Greek)" CONFIG_NLS_ISO8859_7
	dep_tristate $w.config.f 14 23 "NLS ISO 8859-8 (Hebrew)" CONFIG_NLS_ISO8859_8
	dep_tristate $w.config.f 14 24 "NLS ISO 8859-9 (Latin 5; Turkey)" CONFIG_NLS_ISO8859_9
	dep_tristate $w.config.f 14 25 "NLS ISO 8859-14 (Latin 8; Celtic)" CONFIG_NLS_ISO8859_14
	dep_tristate $w.config.f 14 26 "NLS ISO 8859-15 (Latin 9; Western European Languages with Euro)" CONFIG_NLS_ISO8859_15
	dep_tristate $w.config.f 14 27 "NLS KOI8-R (Russian)" CONFIG_NLS_KOI8_R



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu13] == 0} then {menu13 .menu13 "Filesystems"}
	set winx [expr [winfo x .menu13]+30]; set winy [expr [winfo y .menu13]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu14 {} {
	global CONFIG_MODULES
	global CONFIG_NLS
	global CONFIG_NLS_CODEPAGE_437
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_437 [sync_tristate $CONFIG_NLS_CODEPAGE_437 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x0 disabled {y}} else {configure_entry .menu14.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x0 disabled {m}} else {configure_entry .menu14.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x0 normal {m}} else {configure_entry .menu14.config.f.x0 disabled {m}}; configure_entry .menu14.config.f.x0 normal {n l}} else {configure_entry .menu14.config.f.x0 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_737
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_737 [sync_tristate $CONFIG_NLS_CODEPAGE_737 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x1 disabled {y}} else {configure_entry .menu14.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x1 disabled {m}} else {configure_entry .menu14.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x1 normal {m}} else {configure_entry .menu14.config.f.x1 disabled {m}}; configure_entry .menu14.config.f.x1 normal {n l}} else {configure_entry .menu14.config.f.x1 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_775
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_775 [sync_tristate $CONFIG_NLS_CODEPAGE_775 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x2 disabled {y}} else {configure_entry .menu14.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x2 disabled {m}} else {configure_entry .menu14.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x2 normal {m}} else {configure_entry .menu14.config.f.x2 disabled {m}}; configure_entry .menu14.config.f.x2 normal {n l}} else {configure_entry .menu14.config.f.x2 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_850
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_850 [sync_tristate $CONFIG_NLS_CODEPAGE_850 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x3 disabled {y}} else {configure_entry .menu14.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x3 disabled {m}} else {configure_entry .menu14.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x3 normal {m}} else {configure_entry .menu14.config.f.x3 disabled {m}}; configure_entry .menu14.config.f.x3 normal {n l}} else {configure_entry .menu14.config.f.x3 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_852
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_852 [sync_tristate $CONFIG_NLS_CODEPAGE_852 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x4 disabled {y}} else {configure_entry .menu14.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x4 disabled {m}} else {configure_entry .menu14.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x4 normal {m}} else {configure_entry .menu14.config.f.x4 disabled {m}}; configure_entry .menu14.config.f.x4 normal {n l}} else {configure_entry .menu14.config.f.x4 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_855
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_855 [sync_tristate $CONFIG_NLS_CODEPAGE_855 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x5 disabled {y}} else {configure_entry .menu14.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x5 disabled {m}} else {configure_entry .menu14.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x5 normal {m}} else {configure_entry .menu14.config.f.x5 disabled {m}}; configure_entry .menu14.config.f.x5 normal {n l}} else {configure_entry .menu14.config.f.x5 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_857
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_857 [sync_tristate $CONFIG_NLS_CODEPAGE_857 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x6 disabled {y}} else {configure_entry .menu14.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x6 disabled {m}} else {configure_entry .menu14.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x6 normal {m}} else {configure_entry .menu14.config.f.x6 disabled {m}}; configure_entry .menu14.config.f.x6 normal {n l}} else {configure_entry .menu14.config.f.x6 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_860
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_860 [sync_tristate $CONFIG_NLS_CODEPAGE_860 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x7 disabled {y}} else {configure_entry .menu14.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x7 disabled {m}} else {configure_entry .menu14.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x7 normal {m}} else {configure_entry .menu14.config.f.x7 disabled {m}}; configure_entry .menu14.config.f.x7 normal {n l}} else {configure_entry .menu14.config.f.x7 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_861
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_861 [sync_tristate $CONFIG_NLS_CODEPAGE_861 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x8 disabled {y}} else {configure_entry .menu14.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x8 disabled {m}} else {configure_entry .menu14.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x8 normal {m}} else {configure_entry .menu14.config.f.x8 disabled {m}}; configure_entry .menu14.config.f.x8 normal {n l}} else {configure_entry .menu14.config.f.x8 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_862
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_862 [sync_tristate $CONFIG_NLS_CODEPAGE_862 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x9 disabled {y}} else {configure_entry .menu14.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x9 disabled {m}} else {configure_entry .menu14.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x9 normal {m}} else {configure_entry .menu14.config.f.x9 disabled {m}}; configure_entry .menu14.config.f.x9 normal {n l}} else {configure_entry .menu14.config.f.x9 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_863
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_863 [sync_tristate $CONFIG_NLS_CODEPAGE_863 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x10 disabled {y}} else {configure_entry .menu14.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x10 disabled {m}} else {configure_entry .menu14.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x10 normal {m}} else {configure_entry .menu14.config.f.x10 disabled {m}}; configure_entry .menu14.config.f.x10 normal {n l}} else {configure_entry .menu14.config.f.x10 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_864
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_864 [sync_tristate $CONFIG_NLS_CODEPAGE_864 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x11 disabled {y}} else {configure_entry .menu14.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x11 disabled {m}} else {configure_entry .menu14.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x11 normal {m}} else {configure_entry .menu14.config.f.x11 disabled {m}}; configure_entry .menu14.config.f.x11 normal {n l}} else {configure_entry .menu14.config.f.x11 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_865
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_865 [sync_tristate $CONFIG_NLS_CODEPAGE_865 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x12 disabled {y}} else {configure_entry .menu14.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x12 disabled {m}} else {configure_entry .menu14.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x12 normal {m}} else {configure_entry .menu14.config.f.x12 disabled {m}}; configure_entry .menu14.config.f.x12 normal {n l}} else {configure_entry .menu14.config.f.x12 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_866
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_866 [sync_tristate $CONFIG_NLS_CODEPAGE_866 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x13 disabled {y}} else {configure_entry .menu14.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x13 disabled {m}} else {configure_entry .menu14.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x13 normal {m}} else {configure_entry .menu14.config.f.x13 disabled {m}}; configure_entry .menu14.config.f.x13 normal {n l}} else {configure_entry .menu14.config.f.x13 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_869
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_869 [sync_tristate $CONFIG_NLS_CODEPAGE_869 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x14 disabled {y}} else {configure_entry .menu14.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x14 disabled {m}} else {configure_entry .menu14.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x14 normal {m}} else {configure_entry .menu14.config.f.x14 disabled {m}}; configure_entry .menu14.config.f.x14 normal {n l}} else {configure_entry .menu14.config.f.x14 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_874
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_874 [sync_tristate $CONFIG_NLS_CODEPAGE_874 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x15 disabled {y}} else {configure_entry .menu14.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x15 disabled {m}} else {configure_entry .menu14.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x15 normal {m}} else {configure_entry .menu14.config.f.x15 disabled {m}}; configure_entry .menu14.config.f.x15 normal {n l}} else {configure_entry .menu14.config.f.x15 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_1
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_1 [sync_tristate $CONFIG_NLS_ISO8859_1 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x16 disabled {y}} else {configure_entry .menu14.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x16 disabled {m}} else {configure_entry .menu14.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x16 normal {m}} else {configure_entry .menu14.config.f.x16 disabled {m}}; configure_entry .menu14.config.f.x16 normal {n l}} else {configure_entry .menu14.config.f.x16 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_2
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_2 [sync_tristate $CONFIG_NLS_ISO8859_2 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x17 disabled {y}} else {configure_entry .menu14.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x17 disabled {m}} else {configure_entry .menu14.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x17 normal {m}} else {configure_entry .menu14.config.f.x17 disabled {m}}; configure_entry .menu14.config.f.x17 normal {n l}} else {configure_entry .menu14.config.f.x17 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_3
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_3 [sync_tristate $CONFIG_NLS_ISO8859_3 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x18 disabled {y}} else {configure_entry .menu14.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x18 disabled {m}} else {configure_entry .menu14.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x18 normal {m}} else {configure_entry .menu14.config.f.x18 disabled {m}}; configure_entry .menu14.config.f.x18 normal {n l}} else {configure_entry .menu14.config.f.x18 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_4
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_4 [sync_tristate $CONFIG_NLS_ISO8859_4 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x19 disabled {y}} else {configure_entry .menu14.config.f.x19 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x19 disabled {m}} else {configure_entry .menu14.config.f.x19 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x19 normal {m}} else {configure_entry .menu14.config.f.x19 disabled {m}}; configure_entry .menu14.config.f.x19 normal {n l}} else {configure_entry .menu14.config.f.x19 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_5
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_5 [sync_tristate $CONFIG_NLS_ISO8859_5 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x20 disabled {y}} else {configure_entry .menu14.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x20 disabled {m}} else {configure_entry .menu14.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x20 normal {m}} else {configure_entry .menu14.config.f.x20 disabled {m}}; configure_entry .menu14.config.f.x20 normal {n l}} else {configure_entry .menu14.config.f.x20 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_6
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_6 [sync_tristate $CONFIG_NLS_ISO8859_6 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x21 disabled {y}} else {configure_entry .menu14.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x21 disabled {m}} else {configure_entry .menu14.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x21 normal {m}} else {configure_entry .menu14.config.f.x21 disabled {m}}; configure_entry .menu14.config.f.x21 normal {n l}} else {configure_entry .menu14.config.f.x21 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_7
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_7 [sync_tristate $CONFIG_NLS_ISO8859_7 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x22 disabled {y}} else {configure_entry .menu14.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x22 disabled {m}} else {configure_entry .menu14.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x22 normal {m}} else {configure_entry .menu14.config.f.x22 disabled {m}}; configure_entry .menu14.config.f.x22 normal {n l}} else {configure_entry .menu14.config.f.x22 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_8
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_8 [sync_tristate $CONFIG_NLS_ISO8859_8 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x23 disabled {y}} else {configure_entry .menu14.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x23 disabled {m}} else {configure_entry .menu14.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x23 normal {m}} else {configure_entry .menu14.config.f.x23 disabled {m}}; configure_entry .menu14.config.f.x23 normal {n l}} else {configure_entry .menu14.config.f.x23 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_9
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_9 [sync_tristate $CONFIG_NLS_ISO8859_9 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x24 disabled {y}} else {configure_entry .menu14.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x24 disabled {m}} else {configure_entry .menu14.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x24 normal {m}} else {configure_entry .menu14.config.f.x24 disabled {m}}; configure_entry .menu14.config.f.x24 normal {n l}} else {configure_entry .menu14.config.f.x24 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_14
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_14 [sync_tristate $CONFIG_NLS_ISO8859_14 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x25 disabled {y}} else {configure_entry .menu14.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x25 disabled {m}} else {configure_entry .menu14.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x25 normal {m}} else {configure_entry .menu14.config.f.x25 disabled {m}}; configure_entry .menu14.config.f.x25 normal {n l}} else {configure_entry .menu14.config.f.x25 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_15
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_15 [sync_tristate $CONFIG_NLS_ISO8859_15 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x26 disabled {y}} else {configure_entry .menu14.config.f.x26 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x26 disabled {m}} else {configure_entry .menu14.config.f.x26 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x26 normal {m}} else {configure_entry .menu14.config.f.x26 disabled {m}}; configure_entry .menu14.config.f.x26 normal {n l}} else {configure_entry .menu14.config.f.x26 disabled {y n m l}}
	global CONFIG_NLS_KOI8_R
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_KOI8_R [sync_tristate $CONFIG_NLS_KOI8_R $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x27 disabled {y}} else {configure_entry .menu14.config.f.x27 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x27 disabled {m}} else {configure_entry .menu14.config.f.x27 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x27 normal {m}} else {configure_entry .menu14.config.f.x27 disabled {m}}; configure_entry .menu14.config.f.x27 normal {n l}} else {configure_entry .menu14.config.f.x27 disabled {y n m l}}
}


proc update_define_menu14 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NLS
	global CONFIG_NLS_CODEPAGE_437
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_437 [sync_tristate $CONFIG_NLS_CODEPAGE_437 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_437 [expr $CONFIG_NLS_CODEPAGE_437&15]}
	global CONFIG_NLS_CODEPAGE_737
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_737 [sync_tristate $CONFIG_NLS_CODEPAGE_737 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_737 [expr $CONFIG_NLS_CODEPAGE_737&15]}
	global CONFIG_NLS_CODEPAGE_775
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_775 [sync_tristate $CONFIG_NLS_CODEPAGE_775 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_775 [expr $CONFIG_NLS_CODEPAGE_775&15]}
	global CONFIG_NLS_CODEPAGE_850
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_850 [sync_tristate $CONFIG_NLS_CODEPAGE_850 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_850 [expr $CONFIG_NLS_CODEPAGE_850&15]}
	global CONFIG_NLS_CODEPAGE_852
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_852 [sync_tristate $CONFIG_NLS_CODEPAGE_852 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_852 [expr $CONFIG_NLS_CODEPAGE_852&15]}
	global CONFIG_NLS_CODEPAGE_855
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_855 [sync_tristate $CONFIG_NLS_CODEPAGE_855 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_855 [expr $CONFIG_NLS_CODEPAGE_855&15]}
	global CONFIG_NLS_CODEPAGE_857
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_857 [sync_tristate $CONFIG_NLS_CODEPAGE_857 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_857 [expr $CONFIG_NLS_CODEPAGE_857&15]}
	global CONFIG_NLS_CODEPAGE_860
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_860 [sync_tristate $CONFIG_NLS_CODEPAGE_860 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_860 [expr $CONFIG_NLS_CODEPAGE_860&15]}
	global CONFIG_NLS_CODEPAGE_861
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_861 [sync_tristate $CONFIG_NLS_CODEPAGE_861 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_861 [expr $CONFIG_NLS_CODEPAGE_861&15]}
	global CONFIG_NLS_CODEPAGE_862
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_862 [sync_tristate $CONFIG_NLS_CODEPAGE_862 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_862 [expr $CONFIG_NLS_CODEPAGE_862&15]}
	global CONFIG_NLS_CODEPAGE_863
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_863 [sync_tristate $CONFIG_NLS_CODEPAGE_863 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_863 [expr $CONFIG_NLS_CODEPAGE_863&15]}
	global CONFIG_NLS_CODEPAGE_864
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_864 [sync_tristate $CONFIG_NLS_CODEPAGE_864 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_864 [expr $CONFIG_NLS_CODEPAGE_864&15]}
	global CONFIG_NLS_CODEPAGE_865
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_865 [sync_tristate $CONFIG_NLS_CODEPAGE_865 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_865 [expr $CONFIG_NLS_CODEPAGE_865&15]}
	global CONFIG_NLS_CODEPAGE_866
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_866 [sync_tristate $CONFIG_NLS_CODEPAGE_866 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_866 [expr $CONFIG_NLS_CODEPAGE_866&15]}
	global CONFIG_NLS_CODEPAGE_869
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_869 [sync_tristate $CONFIG_NLS_CODEPAGE_869 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_869 [expr $CONFIG_NLS_CODEPAGE_869&15]}
	global CONFIG_NLS_CODEPAGE_874
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_874 [sync_tristate $CONFIG_NLS_CODEPAGE_874 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_874 [expr $CONFIG_NLS_CODEPAGE_874&15]}
	global CONFIG_NLS_ISO8859_1
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_1 [sync_tristate $CONFIG_NLS_ISO8859_1 $tmpvar_dep]; set CONFIG_NLS_ISO8859_1 [expr $CONFIG_NLS_ISO8859_1&15]}
	global CONFIG_NLS_ISO8859_2
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_2 [sync_tristate $CONFIG_NLS_ISO8859_2 $tmpvar_dep]; set CONFIG_NLS_ISO8859_2 [expr $CONFIG_NLS_ISO8859_2&15]}
	global CONFIG_NLS_ISO8859_3
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_3 [sync_tristate $CONFIG_NLS_ISO8859_3 $tmpvar_dep]; set CONFIG_NLS_ISO8859_3 [expr $CONFIG_NLS_ISO8859_3&15]}
	global CONFIG_NLS_ISO8859_4
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_4 [sync_tristate $CONFIG_NLS_ISO8859_4 $tmpvar_dep]; set CONFIG_NLS_ISO8859_4 [expr $CONFIG_NLS_ISO8859_4&15]}
	global CONFIG_NLS_ISO8859_5
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_5 [sync_tristate $CONFIG_NLS_ISO8859_5 $tmpvar_dep]; set CONFIG_NLS_ISO8859_5 [expr $CONFIG_NLS_ISO8859_5&15]}
	global CONFIG_NLS_ISO8859_6
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_6 [sync_tristate $CONFIG_NLS_ISO8859_6 $tmpvar_dep]; set CONFIG_NLS_ISO8859_6 [expr $CONFIG_NLS_ISO8859_6&15]}
	global CONFIG_NLS_ISO8859_7
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_7 [sync_tristate $CONFIG_NLS_ISO8859_7 $tmpvar_dep]; set CONFIG_NLS_ISO8859_7 [expr $CONFIG_NLS_ISO8859_7&15]}
	global CONFIG_NLS_ISO8859_8
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_8 [sync_tristate $CONFIG_NLS_ISO8859_8 $tmpvar_dep]; set CONFIG_NLS_ISO8859_8 [expr $CONFIG_NLS_ISO8859_8&15]}
	global CONFIG_NLS_ISO8859_9
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_9 [sync_tristate $CONFIG_NLS_ISO8859_9 $tmpvar_dep]; set CONFIG_NLS_ISO8859_9 [expr $CONFIG_NLS_ISO8859_9&15]}
	global CONFIG_NLS_ISO8859_14
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_14 [sync_tristate $CONFIG_NLS_ISO8859_14 $tmpvar_dep]; set CONFIG_NLS_ISO8859_14 [expr $CONFIG_NLS_ISO8859_14&15]}
	global CONFIG_NLS_ISO8859_15
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_15 [sync_tristate $CONFIG_NLS_ISO8859_15 $tmpvar_dep]; set CONFIG_NLS_ISO8859_15 [expr $CONFIG_NLS_ISO8859_15&15]}
	global CONFIG_NLS_KOI8_R
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_KOI8_R [sync_tristate $CONFIG_NLS_KOI8_R $tmpvar_dep]; set CONFIG_NLS_KOI8_R [expr $CONFIG_NLS_KOI8_R&15]}
}


menu_option menu15 15 "Character devices"
proc menu15 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 15}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 15]]
	message $w.m -width 400 -aspect 300 -text \
		"Character devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Character devices" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 15"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; menu16 .menu16 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 15; menu14 .menu14 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 15 0 "LEON serial support" CONFIG_LEON_SERIAL
	submenu $w.config.f 15 1 "Kernel hacking" 16



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu15 {} {
	global CONFIG_LEON_2
	global CONFIG_LEON_3
	global CONFIG_LEON_SERIAL
	if {($CONFIG_LEON_2 == 1 || $CONFIG_LEON_3 == 1)} then {
	configure_entry .menu15.config.f.x0 normal {n l y}} else {configure_entry .menu15.config.f.x0 disabled {y n l}}
}


proc update_define_menu15 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_LEON_SERIAL
set CONFIG_LEON_SERIAL [expr $CONFIG_LEON_SERIAL|16]
	global CONFIG_LEON_2
	global CONFIG_LEON_3
	if {($CONFIG_LEON_2 == 1 || $CONFIG_LEON_3 == 1)} then {
	set CONFIG_LEON_SERIAL [expr $CONFIG_LEON_SERIAL&15]}
}


proc menu16 {w title} {
	set oldFocus [focus]
	catch {focus .menu15}
	catch {destroy $w; unregister_active 16}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 16]]
	message $w.m -width 400 -aspect 300 -text \
		"Kernel hacking"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Kernel hacking" 

	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 16"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; menu17 .menu17 \"$title\""
	$w.f.next configure -state disabled
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 16; menu15 .menu15 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 16 0 "Full Symbolic/Source Debugging support" CONFIG_FULLDEBUG
	bool $w.config.f 16 1 "Less wasteful kmalloc.c/page_alloc.c (EXPERIMENTAL)" CONFIG_ALLOC2
	bool $w.config.f 16 2 "Kernel profiling support" CONFIG_PROFILE
	int $w.config.f 16 3 " Profile shift count" CONFIG_PROFILE_SHIFT
	bool $w.config.f 16 4 "Use fast second timer for profiling" CONFIG_HIGHPROFILE
	bool $w.config.f 16 5 "Kernel Memory Protection" CONFIG_MEMORY_PROTECT
	bool $w.config.f 16 6 "Disable BDM signals" CONFIG_BDM_DISABLE



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu15] == 0} then {menu15 .menu15 "Character devices"}
	set winx [expr [winfo x .menu15]+30]; set winy [expr [winfo y .menu15]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu16 {} {
	global CONFIG_EXPERIMENTAL
	global CONFIG_ALLOC2
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu16.config.f.x1 normal {n l y}} else {configure_entry .menu16.config.f.x1 disabled {y n l}}
	global CONFIG_PROFILE
	global CONFIG_PROFILE_SHIFT
	if {($CONFIG_PROFILE == 1)} then {.menu16.config.f.x3.x configure -state normal -foreground [ cget .ref -foreground ]; .menu16.config.f.x3.l configure -state normal; } else {.menu16.config.f.x3.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu16.config.f.x3.l configure -state disabled}
	global CONFIG_HIGHPROFILE
	if {($CONFIG_PROFILE == 1)} then {
	configure_entry .menu16.config.f.x4 normal {n l y}} else {configure_entry .menu16.config.f.x4 disabled {y n l}}
	global CONFIG_COLDFIRE
	global CONFIG_MEMORY_PROTECT
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu16.config.f.x5 normal {n l y}} else {configure_entry .menu16.config.f.x5 disabled {y n l}}
	global CONFIG_BDM_DISABLE
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu16.config.f.x6 normal {n l y}} else {configure_entry .menu16.config.f.x6 disabled {y n l}}
}


proc update_define_menu16 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_ALLOC2
set CONFIG_ALLOC2 [expr $CONFIG_ALLOC2|16]
	global CONFIG_HIGHPROFILE
set CONFIG_HIGHPROFILE [expr $CONFIG_HIGHPROFILE|16]
	global CONFIG_MEMORY_PROTECT
set CONFIG_MEMORY_PROTECT [expr $CONFIG_MEMORY_PROTECT|16]
	global CONFIG_BDM_DISABLE
set CONFIG_BDM_DISABLE [expr $CONFIG_BDM_DISABLE|16]
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_ALLOC2 [expr $CONFIG_ALLOC2&15]}
	global CONFIG_PROFILE
	global CONFIG_PROFILE_SHIFT
	if {($CONFIG_PROFILE == 1)} then {validate_int CONFIG_PROFILE_SHIFT "$CONFIG_PROFILE_SHIFT" 2}
	if {($CONFIG_PROFILE == 1)} then {
	set CONFIG_HIGHPROFILE [expr $CONFIG_HIGHPROFILE&15]}
	global CONFIG_COLDFIRE
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	set CONFIG_MEMORY_PROTECT [expr $CONFIG_MEMORY_PROTECT&15]}
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	set CONFIG_BDM_DISABLE [expr $CONFIG_BDM_DISABLE&15]}
}


proc update_mainmenu {}  {
	global CONFIG_LEON_3
	if {($CONFIG_LEON_3 == 1)} then {.f0.x6 configure -state normal } else { .f0.x6 configure -state disabled }
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {.f0.x11 configure -state normal } else { .f0.x11 configure -state disabled }
	if {($CONFIG_NET == 1)} then {.f0.x12 configure -state normal } else { .f0.x12 configure -state disabled }
}


set CONFIG_EXPERIMENTAL 0
set CONFIG_MODULES 0
set CONFIG_MODVERSIONS 0
set CONFIG_KERNELD 0
set tmpvar_0 "(not set)"
set CONFIG_LEON_2 0
set CONFIG_LEON_3 0
set CONFIG_LEON4TSIM 0
set tmpvar_1 "(not set)"
set CONFIG_RAMKERNEL 0
set CONFIG_ROMKERNEL 0
set CONFIG_PCI 0
set CONFIG_PCIDEVLIST 0
set CONFIG_NET 0
set CONFIG_SYSVIPC 0
set CONFIG_REDUCED_MEMORY 0
set CONFIG_BINFMT_FLAT 0
set CONFIG_BINFMT_ZFLAT 0
set CONFIG_CONSOLE 0
set CONFIG_FRAMEBUFFER 0
set CONFIG_BLK_DEV_BLKMEM 0
set CONFIG_BLK_DEV_IDE 0
set CONFIG_BLK_DEV_IDECD 0
set CONFIG_BLK_DEV_IDETAPE 0
set CONFIG_BLK_DEV_IDEFLOPPY 0
set CONFIG_BLK_DEV_LOOP 0
set CONFIG_BLK_DEV_MD 0
set CONFIG_MD_LINEAR 0
set CONFIG_MD_STRIPED 0
set CONFIG_BLK_DEV_RAM 0
set CONFIG_RD_RELEASE_BLOCKS 0
set CONFIG_DEV_FLASH 0
set CONFIG_BLK_DEV_FLASH 0
set CONFIG_CHR_DEV_FLASH 0
set CONFIG_BLK_DEV_NFA 0
set CONFIG_GRLIB_GAISLER_APBUART 0
set CONFIG_GRLIB_GAISLER_APBUART_FIXED 0
set CONFIG_GRLIB_GAISLER_VGA 0
set CONFIG_GRLIB_GAISLER_VGAMEM_BASE 0xc0000000
set CONFIG_GRLIB_GAISLER_PS2 0
set CONFIG_GRLIB_GAISLER_PS2_KEYBOARD 0
set CONFIG_GRLIB_OPENCORES_ETHERNET 0
set CONFIG_GRLIB_OPENCORES_IRQ_ETH_0 0x0C
set CONFIG_GRLIB_OPENCORES_ETH_BASE_ADD 0xB0000000
set CONFIG_GRLIB_OPENCORES_MACADDR0 0xDE
set CONFIG_GRLIB_OPENCORES_MACADDR1 0xAD
set CONFIG_GRLIB_OPENCORES_MACADDR2 0xBE
set CONFIG_GRLIB_OPENCORES_MACADDR3 0xEF
set CONFIG_GRLIB_OPENCORES_MACADDR4 0x08
set CONFIG_GRLIB_OPENCORES_MACADDR5 0x15
set CONFIG_CAN4LINUX 0
set CONFIG_FIREWALL 0
set CONFIG_NET_ALIAS 0
set CONFIG_INET 0
set CONFIG_IP_FORWARD 0
set CONFIG_IP_MULTICAST 0
set CONFIG_SYN_COOKIES 0
set CONFIG_IP_FIREWALL 0
set CONFIG_IP_FIREWALL_VERBOSE 0
set CONFIG_IP_MASQUERADE 0
set CONFIG_IP_MASQUERADE_IPAUTOFW 0
set CONFIG_IP_MASQUERADE_IPPORTFW 0
set CONFIG_IP_MASQUERADE_PPTP 0
set CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT 0
set DEBUG_IP_MASQUERADE_PPTP 0
set DEBUG_IP_MASQUERADE_PPTP_VERBOSE 0
set CONFIG_IP_MASQUERADE_IPSEC 0
set CONFIG_IP_MASQUERADE_IPSEC_EXPIRE 30
set CONFIG_IP_MASQUERADE_IPSEC_NOGUESS 0
set DEBUG_IP_MASQUERADE_IPSEC 0
set DEBUG_IP_MASQUERADE_IPSEC_VERBOSE 0
set CONFIG_IP_MASQUERADE_ICMP 0
set CONFIG_IP_TRANSPARENT_PROXY 0
set CONFIG_IP_ALWAYS_DEFRAG 0
set CONFIG_IP_ACCT 0
set CONFIG_IP_ROUTER 0
set CONFIG_NET_IPIP 0
set CONFIG_IP_MROUTE 0
set CONFIG_IP_ALIAS 0
set CONFIG_ARPD 0
set CONFIG_INET_PCTCP 0
set CONFIG_INET_RARP 0
set CONFIG_NO_PATH_MTU_DISCOVERY 0
set CONFIG_IP_NOSR 0
set CONFIG_SKB_LARGE 0
set CONFIG_IPX 0
set CONFIG_ATALK 0
set CONFIG_AX25 0
set CONFIG_NETROM 0
set CONFIG_ROSE 0
set CONFIG_BRIDGE 0
set CONFIG_NETLINK 0
set CONFIG_RTNETLINK 0
set CONFIG_IPSEC 0
set CONFIG_IPSEC_IPIP 0
set CONFIG_IPSEC_AH 0
set CONFIG_IPSEC_AUTH_HMAC_MD5 0
set CONFIG_IPSEC_AUTH_HMAC_SHA1 0
set CONFIG_IPSEC_ESP 0
set CONFIG_IPSEC_ENC_DES 0
set CONFIG_IPSEC_ENC_3DES 0
set CONFIG_IPSEC_IPCOMP 0
set CONFIG_IPSEC_IPCOMP_LZS 0
set CONFIG_IPSEC_DEBUG 0
set CONFIG_IPSEC_NAT_TRAVERSAL 0
set CONFIG_NETDEVICES 0
set CONFIG_DUMMY 0
set CONFIG_SLIP 0
set CONFIG_SLIP_COMPRESSED 0
set CONFIG_SLIP_SMART 0
set CONFIG_SLIP_MODE_SLIP6 0
set CONFIG_PPP 0
set CONFIG_EQUALIZER 0
set CONFIG_UCCS8900 0
set CONFIG_UCCS8900_HW_SWAP 0
set CS8900_BASE 0x10000300
set CONFIG_SMC9194 0
set CONFIG_SMC91111 0
set CONFIG_SMC91111_PIO 0x04
set CONFIG_SMC91111_IRQ 0x04
set CONFIG_SMC91111_BASE_ADD 0x20000000
set CONFIG_NE2000 0
set CONFIG_FEC 0
set CONFIG_NE2K_PCI 0
set CONFIG_DEC_ELCP 0
set CONFIG_OPEN_ETH 0
set IRQ_ETH_0 0x0C
set ETH_BASE_ADD 0xB0000000
set MACADDR0 0xDE
set MACADDR1 0xAD
set MACADDR2 0xBE
set MACADDR3 0xEF
set MACADDR4 0x08
set MACADDR5 0x15
set CONFIG_QUOTA 0
set CONFIG_MINIX_FS 0
set CONFIG_EXT_FS 0
set CONFIG_EXT2_FS 0
set CONFIG_XIA_FS 0
set CONFIG_NLS 0
set CONFIG_ISO9660_FS 0
set CONFIG_FAT_FS 0
set CONFIG_MSDOS_FS 0
set CONFIG_UMSDOS_FS 0
set CONFIG_VFAT_FS 0
set CONFIG_NLS_CODEPAGE_437 0
set CONFIG_NLS_CODEPAGE_737 0
set CONFIG_NLS_CODEPAGE_775 0
set CONFIG_NLS_CODEPAGE_850 0
set CONFIG_NLS_CODEPAGE_852 0
set CONFIG_NLS_CODEPAGE_855 0
set CONFIG_NLS_CODEPAGE_857 0
set CONFIG_NLS_CODEPAGE_860 0
set CONFIG_NLS_CODEPAGE_861 0
set CONFIG_NLS_CODEPAGE_862 0
set CONFIG_NLS_CODEPAGE_863 0
set CONFIG_NLS_CODEPAGE_864 0
set CONFIG_NLS_CODEPAGE_865 0
set CONFIG_NLS_CODEPAGE_866 0
set CONFIG_NLS_CODEPAGE_869 0
set CONFIG_NLS_CODEPAGE_874 0
set CONFIG_NLS_ISO8859_1 0
set CONFIG_NLS_ISO8859_2 0
set CONFIG_NLS_ISO8859_3 0
set CONFIG_NLS_ISO8859_4 0
set CONFIG_NLS_ISO8859_5 0
set CONFIG_NLS_ISO8859_6 0
set CONFIG_NLS_ISO8859_7 0
set CONFIG_NLS_ISO8859_8 0
set CONFIG_NLS_ISO8859_9 0
set CONFIG_NLS_ISO8859_14 0
set CONFIG_NLS_ISO8859_15 0
set CONFIG_NLS_KOI8_R 0
set CONFIG_PROC_FS 0
set CONFIG_NFS_FS 0
set CONFIG_ROOT_NFS 0
set CONFIG_RNFS_BOOTP 0
set CONFIG_RNFS_RARP 0
set CONFIG_SMB_FS 0
set CONFIG_SMB_WIN95 0
set CONFIG_NCP_FS 0
set CONFIG_NCPFS_PACKET_SIGNING 0
set CONFIG_NCPFS_IOCTL_LOCKING 0
set CONFIG_NCPFS_STRONG 0
set CONFIG_NCPFS_NFS_NS 0
set CONFIG_NCPFS_OS2_NS 0
set CONFIG_NCPFS_MOUNT_SUBDIR 0
set CONFIG_HPFS_FS 0
set CONFIG_SYSV_FS 0
set CONFIG_AUTOFS_FS 0
set CONFIG_AFFS_FS 0
set CONFIG_ROMFS_FS 0
set CONFIG_JFFS_FS 0
set CONFIG_UFS_FS 0
set CONFIG_BSD_DISKLABEL 0
set CONFIG_SMD_DISKLABEL 0
set CONFIG_LEON_SERIAL 0
set CONFIG_FULLDEBUG 0
set CONFIG_ALLOC2 0
set CONFIG_PROFILE 0
set CONFIG_PROFILE_SHIFT 2
set CONFIG_HIGHPROFILE 0
set CONFIG_MEMORY_PROTECT 0
set CONFIG_BDM_DISABLE 0
set CONFIG_UCLINUX 4
set CONFIG_IPSEC_ALG 4
set CONFIG_IPSEC_ALG_AES 4
set CONFIG_AMIGA_PARTITION 4
set CONFIG_COLDFIRE 4
proc writeconfig {file1 file2} {
	set cfg [open $file1 w]
	set autocfg [open $file2 w]
	set notmod 1
	set notset 0
	puts $cfg "#"
	puts $cfg "# Automatically generated make config: don't edit"
	puts $cfg "#"
	puts $autocfg "/*"
	puts $autocfg " * Automatically generated C config: don't edit"
	puts $autocfg " */"
	puts $autocfg "#define AUTOCONF_INCLUDED"
	global CONFIG_UCLINUX
	global CONSTANT_Y
	write_tristate $cfg $autocfg CONFIG_UCLINUX $CONFIG_UCLINUX [list $notmod] 2
	write_comment $cfg $autocfg "Code maturity level options"
	global CONFIG_EXPERIMENTAL
	write_tristate $cfg $autocfg CONFIG_EXPERIMENTAL $CONFIG_EXPERIMENTAL [list $notmod] 2
	write_comment $cfg $autocfg "Loadable module support"
	global CONFIG_MODULES
	write_tristate $cfg $autocfg CONFIG_MODULES $CONFIG_MODULES [list $notmod] 2
	global CONFIG_MODVERSIONS
	if {($CONFIG_MODULES == 1)} then {write_tristate $cfg $autocfg CONFIG_MODVERSIONS $CONFIG_MODVERSIONS [list $notmod] 2 }
	global CONFIG_KERNELD
	if {($CONFIG_MODULES == 1)} then {write_tristate $cfg $autocfg CONFIG_KERNELD $CONFIG_KERNELD [list $notmod] 2 }
	write_comment $cfg $autocfg "Platform dependant setup"
	global tmpvar_0
	
	if { $tmpvar_0 == "LEON-2.x" } then { write_tristate $cfg $autocfg CONFIG_LEON_2 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_LEON_2 0 [list $notmod] 2 }
	if { $tmpvar_0 == "LEON-3.x" } then { write_tristate $cfg $autocfg CONFIG_LEON_3 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_LEON_3 0 [list $notmod] 2 }
	write_comment $cfg $autocfg "Platform"
	global CONFIG_LEON4TSIM
	global CONFIG_LEON_2
	global CONFIG_LEON_3
	if {($CONFIG_LEON_2 == 1 || $CONFIG_LEON_3 == 1)} then {write_tristate $cfg $autocfg CONFIG_LEON4TSIM $CONFIG_LEON4TSIM [list $notmod] 2 }
	global tmpvar_1
	
	if { $tmpvar_1 == "RAM" } then { write_tristate $cfg $autocfg CONFIG_RAMKERNEL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAMKERNEL 0 [list $notmod] 2 }
	if { $tmpvar_1 == "ROM" } then { write_tristate $cfg $autocfg CONFIG_ROMKERNEL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_ROMKERNEL 0 [list $notmod] 2 }
	write_comment $cfg $autocfg "General setup"
	global CONFIG_PCI
	write_tristate $cfg $autocfg CONFIG_PCI $CONFIG_PCI [list $notmod] 2
	global CONFIG_PCIDEVLIST
	if {($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_PCIDEVLIST $CONFIG_PCIDEVLIST [list $notmod] 2 }
	global CONFIG_NET
	write_tristate $cfg $autocfg CONFIG_NET $CONFIG_NET [list $notmod] 2
	global CONFIG_SYSVIPC
	write_tristate $cfg $autocfg CONFIG_SYSVIPC $CONFIG_SYSVIPC [list $notmod] 2
	global CONFIG_REDUCED_MEMORY
	write_tristate $cfg $autocfg CONFIG_REDUCED_MEMORY $CONFIG_REDUCED_MEMORY [list $notmod] 2
	global CONFIG_BINFMT_FLAT
	write_tristate $cfg $autocfg CONFIG_BINFMT_FLAT $CONFIG_BINFMT_FLAT [list $notmod] 2
	global CONFIG_BINFMT_ZFLAT
	if {($CONFIG_BINFMT_FLAT != 0)} then {write_tristate $cfg $autocfg CONFIG_BINFMT_ZFLAT $CONFIG_BINFMT_ZFLAT [list $notmod] 2 }
	global CONFIG_CONSOLE
	write_tristate $cfg $autocfg CONFIG_CONSOLE $CONFIG_CONSOLE [list $notmod] 2
	global CONFIG_FRAMEBUFFER
	if {($CONFIG_CONSOLE == 1)} then {write_tristate $cfg $autocfg CONFIG_FRAMEBUFFER $CONFIG_FRAMEBUFFER [list $notmod] 2 }
	write_comment $cfg $autocfg "Floppy, IDE, and other block devices"
	global CONFIG_BLK_DEV_BLKMEM
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_BLKMEM $CONFIG_BLK_DEV_BLKMEM [list $notmod] 2
	global CONFIG_BLK_DEV_IDE
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDE $CONFIG_BLK_DEV_IDE [list $notmod] 2
	global CONFIG_BLK_DEV_IDECD
	if {($CONFIG_BLK_DEV_IDE == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDECD $CONFIG_BLK_DEV_IDECD [list $notmod] 2 }
	global CONFIG_BLK_DEV_IDETAPE
	if {($CONFIG_BLK_DEV_IDE == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDETAPE $CONFIG_BLK_DEV_IDETAPE [list $notmod] 2 }
	global CONFIG_BLK_DEV_IDEFLOPPY
	if {($CONFIG_BLK_DEV_IDE == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEFLOPPY $CONFIG_BLK_DEV_IDEFLOPPY [list $notmod] 2 }
	write_comment $cfg $autocfg "Additional Block/FLASH Devices"
	global CONFIG_BLK_DEV_LOOP
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_LOOP $CONFIG_BLK_DEV_LOOP [list $notmod] 2
	global CONFIG_BLK_DEV_MD
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_MD $CONFIG_BLK_DEV_MD [list $notmod] 2
	global CONFIG_MD_LINEAR
	if {($CONFIG_BLK_DEV_MD == 1)} then {write_tristate $cfg $autocfg CONFIG_MD_LINEAR $CONFIG_MD_LINEAR [list $notmod] 2 }
	global CONFIG_MD_STRIPED
	if {($CONFIG_BLK_DEV_MD == 1)} then {write_tristate $cfg $autocfg CONFIG_MD_STRIPED $CONFIG_MD_STRIPED [list $notmod] 2 }
	global CONFIG_BLK_DEV_RAM
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_RAM $CONFIG_BLK_DEV_RAM [list $notmod] 2
	global CONFIG_RD_RELEASE_BLOCKS
	if {($CONFIG_BLK_DEV_RAM == 1)} then {write_tristate $cfg $autocfg CONFIG_RD_RELEASE_BLOCKS $CONFIG_RD_RELEASE_BLOCKS [list $notmod] 2 }
	global CONFIG_DEV_FLASH
	write_tristate $cfg $autocfg CONFIG_DEV_FLASH $CONFIG_DEV_FLASH [list $notmod] 2
	global CONFIG_BLK_DEV_FLASH
	if {($CONFIG_DEV_FLASH == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_FLASH $CONFIG_BLK_DEV_FLASH [list $notmod] 2 }
	global CONFIG_CHR_DEV_FLASH
	if {($CONFIG_DEV_FLASH == 1)} then {write_tristate $cfg $autocfg CONFIG_CHR_DEV_FLASH $CONFIG_CHR_DEV_FLASH [list $notmod] 2 }
	global CONFIG_BLK_DEV_NFA
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_NFA $CONFIG_BLK_DEV_NFA [list $notmod] 2
	if {($CONFIG_LEON_3 == 1)} then {write_comment $cfg $autocfg "Leon3 Amba configuration"}
	if {($CONFIG_LEON_3 == 1)} then {write_comment $cfg $autocfg "Vendor Gaisler"}
	global CONFIG_GRLIB_GAISLER_APBUART
	if {($CONFIG_LEON_3 == 1)} then {write_tristate $cfg $autocfg CONFIG_GRLIB_GAISLER_APBUART $CONFIG_GRLIB_GAISLER_APBUART [list $notmod] 2 }
	global CONFIG_GRLIB_GAISLER_APBUART_FIXED
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_GAISLER_APBUART == 1)} then {write_tristate $cfg $autocfg CONFIG_GRLIB_GAISLER_APBUART_FIXED $CONFIG_GRLIB_GAISLER_APBUART_FIXED [list $notmod] 2 }
	global CONFIG_GRLIB_GAISLER_VGA
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_CONSOLE == 1)} then {write_tristate $cfg $autocfg CONFIG_GRLIB_GAISLER_VGA $CONFIG_GRLIB_GAISLER_VGA [list $notmod] 2 }
	global CONFIG_GRLIB_GAISLER_VGAMEM_BASE
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_CONSOLE == 1) && ($CONFIG_GRLIB_GAISLER_VGA == 1)} then {write_hex $cfg $autocfg CONFIG_GRLIB_GAISLER_VGAMEM_BASE $CONFIG_GRLIB_GAISLER_VGAMEM_BASE $notmod }
	if {($CONFIG_LEON_3 == 1)} then {write_comment $cfg $autocfg "PS/2 drivers"}
	global CONFIG_GRLIB_GAISLER_PS2
	if {($CONFIG_LEON_3 == 1)} then {write_tristate $cfg $autocfg CONFIG_GRLIB_GAISLER_PS2 $CONFIG_GRLIB_GAISLER_PS2 [list $notmod] 2 }
	global CONFIG_GRLIB_GAISLER_PS2_KEYBOARD
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_GAISLER_PS2 == 1)} then {write_tristate $cfg $autocfg CONFIG_GRLIB_GAISLER_PS2_KEYBOARD $CONFIG_GRLIB_GAISLER_PS2_KEYBOARD [list $notmod] 2 }
	if {($CONFIG_LEON_3 == 1)} then {write_comment $cfg $autocfg "Vendor Opencores"}
	global CONFIG_GRLIB_OPENCORES_ETHERNET
	if {($CONFIG_LEON_3 == 1)} then {write_tristate $cfg $autocfg CONFIG_GRLIB_OPENCORES_ETHERNET $CONFIG_GRLIB_OPENCORES_ETHERNET [list $notmod] 2 }
	global CONFIG_GRLIB_OPENCORES_IRQ_ETH_0
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {write_hex $cfg $autocfg CONFIG_GRLIB_OPENCORES_IRQ_ETH_0 $CONFIG_GRLIB_OPENCORES_IRQ_ETH_0 $notmod }
	global CONFIG_GRLIB_OPENCORES_ETH_BASE_ADD
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {write_hex $cfg $autocfg CONFIG_GRLIB_OPENCORES_ETH_BASE_ADD $CONFIG_GRLIB_OPENCORES_ETH_BASE_ADD $notmod }
	global CONFIG_GRLIB_OPENCORES_MACADDR0
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {write_hex $cfg $autocfg CONFIG_GRLIB_OPENCORES_MACADDR0 $CONFIG_GRLIB_OPENCORES_MACADDR0 $notmod }
	global CONFIG_GRLIB_OPENCORES_MACADDR1
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {write_hex $cfg $autocfg CONFIG_GRLIB_OPENCORES_MACADDR1 $CONFIG_GRLIB_OPENCORES_MACADDR1 $notmod }
	global CONFIG_GRLIB_OPENCORES_MACADDR2
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {write_hex $cfg $autocfg CONFIG_GRLIB_OPENCORES_MACADDR2 $CONFIG_GRLIB_OPENCORES_MACADDR2 $notmod }
	global CONFIG_GRLIB_OPENCORES_MACADDR3
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {write_hex $cfg $autocfg CONFIG_GRLIB_OPENCORES_MACADDR3 $CONFIG_GRLIB_OPENCORES_MACADDR3 $notmod }
	global CONFIG_GRLIB_OPENCORES_MACADDR4
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {write_hex $cfg $autocfg CONFIG_GRLIB_OPENCORES_MACADDR4 $CONFIG_GRLIB_OPENCORES_MACADDR4 $notmod }
	global CONFIG_GRLIB_OPENCORES_MACADDR5
	if {($CONFIG_LEON_3 == 1) && ($CONFIG_GRLIB_OPENCORES_ETHERNET == 1)} then {write_hex $cfg $autocfg CONFIG_GRLIB_OPENCORES_MACADDR5 $CONFIG_GRLIB_OPENCORES_MACADDR5 $notmod }
	write_comment $cfg $autocfg "Controller Area Network Cards/Chips"
	global CONFIG_CAN4LINUX
	write_tristate $cfg $autocfg CONFIG_CAN4LINUX $CONFIG_CAN4LINUX [list $notmod] 2
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg "Networking options"}
	global CONFIG_FIREWALL
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_FIREWALL $CONFIG_FIREWALL [list $notmod] 2 }
	global CONFIG_NET_ALIAS
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_ALIAS $CONFIG_NET_ALIAS [list $notmod] 2 }
	global CONFIG_INET
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_INET $CONFIG_INET [list $notmod] 2 }
	global CONFIG_IP_FORWARD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_FORWARD $CONFIG_IP_FORWARD [list $notmod] 2 }
	global CONFIG_IP_MULTICAST
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MULTICAST $CONFIG_IP_MULTICAST [list $notmod] 2 }
	global CONFIG_SYN_COOKIES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_SYN_COOKIES $CONFIG_SYN_COOKIES [list $notmod] 2 }
	global CONFIG_IP_FIREWALL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_FIREWALL $CONFIG_IP_FIREWALL [list $notmod] 2 }
	global CONFIG_IP_FIREWALL_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_FIREWALL_VERBOSE $CONFIG_IP_FIREWALL_VERBOSE [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE $CONFIG_IP_MASQUERADE [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {write_comment $cfg $autocfg "Protocol-specific masquerading support will be built as modules."}
	global CONFIG_IP_MASQUERADE_IPAUTOFW
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_IPAUTOFW $CONFIG_IP_MASQUERADE_IPAUTOFW [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_IPPORTFW
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_IPPORTFW $CONFIG_IP_MASQUERADE_IPPORTFW [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_PPTP $CONFIG_IP_MASQUERADE_PPTP [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT $CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT [list $notmod] 2 }
	global DEBUG_IP_MASQUERADE_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {write_tristate $cfg $autocfg DEBUG_IP_MASQUERADE_PPTP $DEBUG_IP_MASQUERADE_PPTP [list $notmod] 2 }
	global DEBUG_IP_MASQUERADE_PPTP_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1) && ($DEBUG_IP_MASQUERADE_PPTP == 1)} then {write_tristate $cfg $autocfg DEBUG_IP_MASQUERADE_PPTP_VERBOSE $DEBUG_IP_MASQUERADE_PPTP_VERBOSE [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_IPSEC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_IPSEC $CONFIG_IP_MASQUERADE_IPSEC [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_IPSEC_EXPIRE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {write_int $cfg $autocfg CONFIG_IP_MASQUERADE_IPSEC_EXPIRE $CONFIG_IP_MASQUERADE_IPSEC_EXPIRE $notmod }
	global CONFIG_IP_MASQUERADE_IPSEC_NOGUESS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_IPSEC_NOGUESS $CONFIG_IP_MASQUERADE_IPSEC_NOGUESS [list $notmod] 2 }
	global DEBUG_IP_MASQUERADE_IPSEC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {write_tristate $cfg $autocfg DEBUG_IP_MASQUERADE_IPSEC $DEBUG_IP_MASQUERADE_IPSEC [list $notmod] 2 }
	global DEBUG_IP_MASQUERADE_IPSEC_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1) && ($DEBUG_IP_MASQUERADE_IPSEC == 1)} then {write_tristate $cfg $autocfg DEBUG_IP_MASQUERADE_IPSEC_VERBOSE $DEBUG_IP_MASQUERADE_IPSEC_VERBOSE [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_ICMP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_ICMP $CONFIG_IP_MASQUERADE_ICMP [list $notmod] 2 }
	global CONFIG_IP_TRANSPARENT_PROXY
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_TRANSPARENT_PROXY $CONFIG_IP_TRANSPARENT_PROXY [list $notmod] 2 }
	global CONFIG_IP_ALWAYS_DEFRAG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ALWAYS_DEFRAG $CONFIG_IP_ALWAYS_DEFRAG [list $notmod] 2 }
	global CONFIG_IP_ACCT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ACCT $CONFIG_IP_ACCT [list $notmod] 2 }
	global CONFIG_IP_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ROUTER $CONFIG_IP_ROUTER [list $notmod] 2 }
	global CONFIG_NET_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_IPIP $CONFIG_NET_IPIP [list $notmod] 2 }
	global CONFIG_IP_MROUTE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MROUTE $CONFIG_IP_MROUTE [list $notmod] 2 }
	global CONFIG_IP_ALIAS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NET_ALIAS == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ALIAS $CONFIG_IP_ALIAS [list $notmod] 2 }
	global CONFIG_ARPD
	global CONFIG_NETLINK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_NETLINK == 1)} then {write_tristate $cfg $autocfg CONFIG_ARPD $CONFIG_ARPD [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_comment $cfg $autocfg "(it is safe to leave these untouched)"}
	global CONFIG_INET_PCTCP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_INET_PCTCP $CONFIG_INET_PCTCP [list $notmod] 2 }
	global CONFIG_INET_RARP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_INET_RARP $CONFIG_INET_RARP [list $notmod] 2 }
	global CONFIG_NO_PATH_MTU_DISCOVERY
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_NO_PATH_MTU_DISCOVERY $CONFIG_NO_PATH_MTU_DISCOVERY [list $notmod] 2 }
	global CONFIG_IP_NOSR
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_NOSR $CONFIG_IP_NOSR [list $notmod] 2 }
	global CONFIG_SKB_LARGE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_SKB_LARGE $CONFIG_SKB_LARGE [list $notmod] 2 }
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg " "}
	global CONFIG_IPX
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_IPX $CONFIG_IPX [list $notmod] 2 }
	global CONFIG_ATALK
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_ATALK $CONFIG_ATALK [list $notmod] 2 }
	global CONFIG_AX25
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_AX25 $CONFIG_AX25 [list $notmod] 2 }
	global CONFIG_NETROM
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_NETROM $CONFIG_NETROM [list $CONFIG_AX25] 2 }
	global CONFIG_ROSE
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_ROSE $CONFIG_ROSE [list $CONFIG_AX25] 2 }
	global CONFIG_BRIDGE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_BRIDGE $CONFIG_BRIDGE [list $notmod] 2 }
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NETLINK $CONFIG_NETLINK [list $notmod] 2 }
	global CONFIG_RTNETLINK
	if {($CONFIG_NET == 1) && ($CONFIG_NETLINK == 1)} then {write_tristate $cfg $autocfg CONFIG_RTNETLINK $CONFIG_RTNETLINK [list $notmod] 2 }
	global CONFIG_IPSEC
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC $CONFIG_IPSEC [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_comment $cfg $autocfg "IPSec options (FreeS/WAN)"}
	global CONFIG_IPSEC_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_IPIP $CONFIG_IPSEC_IPIP [list $notmod] 2 }
	global CONFIG_IPSEC_ALG
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPIP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ALG $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_IPSEC_ALG_AES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPIP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ALG_AES $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_IPSEC_AH
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_AH $CONFIG_IPSEC_AH [list $notmod] 2 }
	global CONFIG_IPSEC_AUTH_HMAC_MD5
	global CONFIG_IPSEC_ESP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_AUTH_HMAC_MD5 $CONFIG_IPSEC_AUTH_HMAC_MD5 [list $notmod] 2 }
	global CONFIG_IPSEC_AUTH_HMAC_SHA1
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_AUTH_HMAC_SHA1 $CONFIG_IPSEC_AUTH_HMAC_SHA1 [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ESP $CONFIG_IPSEC_ESP [list $notmod] 2 }
	global CONFIG_IPSEC_ENC_DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ENC_DES $CONFIG_IPSEC_ENC_DES [list $notmod] 2 }
	global CONFIG_IPSEC_ENC_3DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ENC_3DES $CONFIG_IPSEC_ENC_3DES [list $notmod] 2 }
	global CONFIG_IPSEC_IPCOMP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_IPCOMP $CONFIG_IPSEC_IPCOMP [list $notmod] 2 }
	global CONFIG_IPSEC_IPCOMP_LZS
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPCOMP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_IPCOMP_LZS $CONFIG_IPSEC_IPCOMP_LZS [list $notmod] 2 }
	global CONFIG_IPSEC_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_DEBUG $CONFIG_IPSEC_DEBUG [list $notmod] 2 }
	global CONFIG_IPSEC_NAT_TRAVERSAL
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_NAT_TRAVERSAL $CONFIG_IPSEC_NAT_TRAVERSAL [list $notmod] 2 }
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg "Network device support"}
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NETDEVICES $CONFIG_NETDEVICES [list $notmod] 2 }
	global CONFIG_DUMMY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_DUMMY $CONFIG_DUMMY [list $notmod] 2 }
	global CONFIG_SLIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_SLIP $CONFIG_SLIP [list $notmod] 2 }
	global CONFIG_SLIP_COMPRESSED
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {write_tristate $cfg $autocfg CONFIG_SLIP_COMPRESSED $CONFIG_SLIP_COMPRESSED [list $notmod] 2 }
	global CONFIG_SLIP_SMART
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {write_tristate $cfg $autocfg CONFIG_SLIP_SMART $CONFIG_SLIP_SMART [list $notmod] 2 }
	global CONFIG_SLIP_MODE_SLIP6
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {write_tristate $cfg $autocfg CONFIG_SLIP_MODE_SLIP6 $CONFIG_SLIP_MODE_SLIP6 [list $notmod] 2 }
	global CONFIG_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_PPP $CONFIG_PPP [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0)} then {write_comment $cfg $autocfg "CCP compressors for PPP are only built as modules."}
	global CONFIG_EQUALIZER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_EQUALIZER $CONFIG_EQUALIZER [list $notmod] 2 }
	global CONFIG_UCCS8900
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_UCCS8900 $CONFIG_UCCS8900 [list $notmod] 2 }
	global CONFIG_UCCS8900_HW_SWAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0)} then {write_tristate $cfg $autocfg CONFIG_UCCS8900_HW_SWAP $CONFIG_UCCS8900_HW_SWAP [list $notmod] 2 }
	global CS8900_BASE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0)} then {write_hex $cfg $autocfg CS8900_BASE $CS8900_BASE $notmod }
	global CONFIG_SMC9194
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_SMC9194 $CONFIG_SMC9194 [list $notmod] 2 }
	global CONFIG_SMC91111
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_SMC91111 $CONFIG_SMC91111 [list $notmod] 2 }
	global CONFIG_SMC91111_PIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SMC91111 == 1)} then {write_hex $cfg $autocfg CONFIG_SMC91111_PIO $CONFIG_SMC91111_PIO $notmod }
	global CONFIG_SMC91111_IRQ
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SMC91111 == 1)} then {write_hex $cfg $autocfg CONFIG_SMC91111_IRQ $CONFIG_SMC91111_IRQ $notmod }
	global CONFIG_SMC91111_BASE_ADD
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SMC91111 == 1)} then {write_hex $cfg $autocfg CONFIG_SMC91111_BASE_ADD $CONFIG_SMC91111_BASE_ADD $notmod }
	global CONFIG_NE2000
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_NE2000 $CONFIG_NE2000 [list $notmod] 2 }
	global CONFIG_FEC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_FEC $CONFIG_FEC [list $notmod] 2 }
	global CONFIG_NE2K_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_NE2K_PCI $CONFIG_NE2K_PCI [list $notmod] 2 }
	global CONFIG_DEC_ELCP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_DEC_ELCP $CONFIG_DEC_ELCP [list $notmod] 2 }
	global CONFIG_OPEN_ETH
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_OPEN_ETH $CONFIG_OPEN_ETH [list $notmod] 2 }
	global IRQ_ETH_0
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {write_hex $cfg $autocfg IRQ_ETH_0 $IRQ_ETH_0 $notmod }
	global ETH_BASE_ADD
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {write_hex $cfg $autocfg ETH_BASE_ADD $ETH_BASE_ADD $notmod }
	global MACADDR0
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {write_hex $cfg $autocfg MACADDR0 $MACADDR0 $notmod }
	global MACADDR1
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {write_hex $cfg $autocfg MACADDR1 $MACADDR1 $notmod }
	global MACADDR2
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {write_hex $cfg $autocfg MACADDR2 $MACADDR2 $notmod }
	global MACADDR3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {write_hex $cfg $autocfg MACADDR3 $MACADDR3 $notmod }
	global MACADDR4
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {write_hex $cfg $autocfg MACADDR4 $MACADDR4 $notmod }
	global MACADDR5
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_OPEN_ETH == 1)} then {write_hex $cfg $autocfg MACADDR5 $MACADDR5 $notmod }
	write_comment $cfg $autocfg "Filesystems"
	global CONFIG_QUOTA
	write_tristate $cfg $autocfg CONFIG_QUOTA $CONFIG_QUOTA [list $notmod] 2
	global CONFIG_MINIX_FS
	write_tristate $cfg $autocfg CONFIG_MINIX_FS $CONFIG_MINIX_FS [list $notmod] 2
	global CONFIG_EXT_FS
	write_tristate $cfg $autocfg CONFIG_EXT_FS $CONFIG_EXT_FS [list $notmod] 2
	global CONFIG_EXT2_FS
	write_tristate $cfg $autocfg CONFIG_EXT2_FS $CONFIG_EXT2_FS [list $notmod] 2
	global CONFIG_XIA_FS
	write_tristate $cfg $autocfg CONFIG_XIA_FS $CONFIG_XIA_FS [list $notmod] 2
	global CONFIG_NLS
	write_tristate $cfg $autocfg CONFIG_NLS $CONFIG_NLS [list $notmod] 2
	global CONFIG_ISO9660_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_ISO9660_FS $CONFIG_ISO9660_FS [list $CONFIG_NLS] 2 }
	global CONFIG_FAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_FAT_FS $CONFIG_FAT_FS [list $CONFIG_NLS] 2 }
	global CONFIG_MSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_MSDOS_FS $CONFIG_MSDOS_FS [list $CONFIG_FAT_FS] 2 }
	global CONFIG_UMSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_MSDOS_FS == 1 || $CONFIG_MSDOS_FS == 2 || $CONFIG_MSDOS_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_UMSDOS_FS $CONFIG_UMSDOS_FS [list $CONFIG_MSDOS_FS] 2 }
	global CONFIG_VFAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_VFAT_FS $CONFIG_VFAT_FS [list $CONFIG_FAT_FS] 2 }
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2)} then {write_comment $cfg $autocfg "Select available code pages"}
	global CONFIG_NLS_CODEPAGE_437
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_437 $CONFIG_NLS_CODEPAGE_437 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_737
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_737 $CONFIG_NLS_CODEPAGE_737 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_775
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_775 $CONFIG_NLS_CODEPAGE_775 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_850
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_850 $CONFIG_NLS_CODEPAGE_850 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_852
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_852 $CONFIG_NLS_CODEPAGE_852 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_855
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_855 $CONFIG_NLS_CODEPAGE_855 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_857
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_857 $CONFIG_NLS_CODEPAGE_857 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_860
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_860 $CONFIG_NLS_CODEPAGE_860 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_861
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_861 $CONFIG_NLS_CODEPAGE_861 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_862
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_862 $CONFIG_NLS_CODEPAGE_862 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_863
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_863 $CONFIG_NLS_CODEPAGE_863 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_864
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_864 $CONFIG_NLS_CODEPAGE_864 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_865
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_865 $CONFIG_NLS_CODEPAGE_865 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_866
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_866 $CONFIG_NLS_CODEPAGE_866 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_869
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_869 $CONFIG_NLS_CODEPAGE_869 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_874
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_874 $CONFIG_NLS_CODEPAGE_874 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_1
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_1 $CONFIG_NLS_ISO8859_1 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_2
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_2 $CONFIG_NLS_ISO8859_2 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_3
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_3 $CONFIG_NLS_ISO8859_3 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_4
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_4 $CONFIG_NLS_ISO8859_4 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_5
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_5 $CONFIG_NLS_ISO8859_5 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_6
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_6 $CONFIG_NLS_ISO8859_6 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_7
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_7 $CONFIG_NLS_ISO8859_7 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_8
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_8 $CONFIG_NLS_ISO8859_8 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_9
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_9 $CONFIG_NLS_ISO8859_9 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_14
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_14 $CONFIG_NLS_ISO8859_14 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_15
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_15 $CONFIG_NLS_ISO8859_15 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_KOI8_R
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_KOI8_R $CONFIG_NLS_KOI8_R [list $CONFIG_NLS] 2 }
	global CONFIG_PROC_FS
	write_tristate $cfg $autocfg CONFIG_PROC_FS $CONFIG_PROC_FS [list $notmod] 2
	global CONFIG_NFS_FS
	if {($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_NFS_FS $CONFIG_NFS_FS [list $notmod] 2 }
	global CONFIG_ROOT_NFS
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1)} then {write_tristate $cfg $autocfg CONFIG_ROOT_NFS $CONFIG_ROOT_NFS [list $notmod] 2 }
	global CONFIG_RNFS_BOOTP
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {write_tristate $cfg $autocfg CONFIG_RNFS_BOOTP $CONFIG_RNFS_BOOTP [list $notmod] 2 }
	global CONFIG_RNFS_RARP
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {write_tristate $cfg $autocfg CONFIG_RNFS_RARP $CONFIG_RNFS_RARP [list $notmod] 2 }
	global CONFIG_SMB_FS
	if {($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_SMB_FS $CONFIG_SMB_FS [list $notmod] 2 }
	global CONFIG_SMB_WIN95
	if {($CONFIG_INET == 1) && ($CONFIG_SMB_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_SMB_WIN95 $CONFIG_SMB_WIN95 [list $notmod] 2 }
	global CONFIG_NCP_FS
	if {($CONFIG_IPX != 0)} then {write_tristate $cfg $autocfg CONFIG_NCP_FS $CONFIG_NCP_FS [list $notmod] 2 }
	global CONFIG_NCPFS_PACKET_SIGNING
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_PACKET_SIGNING $CONFIG_NCPFS_PACKET_SIGNING [list $notmod] 2 }
	global CONFIG_NCPFS_IOCTL_LOCKING
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_IOCTL_LOCKING $CONFIG_NCPFS_IOCTL_LOCKING [list $notmod] 2 }
	global CONFIG_NCPFS_STRONG
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_STRONG $CONFIG_NCPFS_STRONG [list $notmod] 2 }
	global CONFIG_NCPFS_NFS_NS
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_NFS_NS $CONFIG_NCPFS_NFS_NS [list $notmod] 2 }
	global CONFIG_NCPFS_OS2_NS
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_OS2_NS $CONFIG_NCPFS_OS2_NS [list $notmod] 2 }
	global CONFIG_NCPFS_MOUNT_SUBDIR
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_MOUNT_SUBDIR $CONFIG_NCPFS_MOUNT_SUBDIR [list $notmod] 2 }
	global CONFIG_HPFS_FS
	write_tristate $cfg $autocfg CONFIG_HPFS_FS $CONFIG_HPFS_FS [list $notmod] 2
	global CONFIG_SYSV_FS
	write_tristate $cfg $autocfg CONFIG_SYSV_FS $CONFIG_SYSV_FS [list $notmod] 2
	global CONFIG_AUTOFS_FS
	if {($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_AUTOFS_FS $CONFIG_AUTOFS_FS [list $notmod] 2 }
	global CONFIG_AFFS_FS
	if {($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_AFFS_FS $CONFIG_AFFS_FS [list $notmod] 2 }
	global CONFIG_AMIGA_PARTITION
	if {($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_AFFS_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_AMIGA_PARTITION $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_ROMFS_FS
	write_tristate $cfg $autocfg CONFIG_ROMFS_FS $CONFIG_ROMFS_FS [list $notmod] 2
	global CONFIG_JFFS_FS
	write_tristate $cfg $autocfg CONFIG_JFFS_FS $CONFIG_JFFS_FS [list $notmod] 2
	global CONFIG_UFS_FS
	write_tristate $cfg $autocfg CONFIG_UFS_FS $CONFIG_UFS_FS [list $notmod] 2
	global CONFIG_BSD_DISKLABEL
	if {($CONFIG_UFS_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_BSD_DISKLABEL $CONFIG_BSD_DISKLABEL [list $notmod] 2 }
	global CONFIG_SMD_DISKLABEL
	if {($CONFIG_UFS_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_SMD_DISKLABEL $CONFIG_SMD_DISKLABEL [list $notmod] 2 }
	write_comment $cfg $autocfg "Character devices"
	global CONFIG_LEON_SERIAL
	if {($CONFIG_LEON_2 == 1 || $CONFIG_LEON_3 == 1)} then {write_tristate $cfg $autocfg CONFIG_LEON_SERIAL $CONFIG_LEON_SERIAL [list $notmod] 2 }
	write_comment $cfg $autocfg "Kernel hacking"
	global CONFIG_FULLDEBUG
	write_tristate $cfg $autocfg CONFIG_FULLDEBUG $CONFIG_FULLDEBUG [list $notmod] 2
	global CONFIG_ALLOC2
	if {($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_ALLOC2 $CONFIG_ALLOC2 [list $notmod] 2 }
	global CONFIG_PROFILE
	write_tristate $cfg $autocfg CONFIG_PROFILE $CONFIG_PROFILE [list $notmod] 2
	global CONFIG_PROFILE_SHIFT
	if {($CONFIG_PROFILE == 1)} then {write_int $cfg $autocfg CONFIG_PROFILE_SHIFT $CONFIG_PROFILE_SHIFT $notmod }
	global CONFIG_HIGHPROFILE
	if {($CONFIG_PROFILE == 1)} then {write_tristate $cfg $autocfg CONFIG_HIGHPROFILE $CONFIG_HIGHPROFILE [list $notmod] 2 }
	global CONFIG_MEMORY_PROTECT
	global CONFIG_COLDFIRE
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_MEMORY_PROTECT $CONFIG_MEMORY_PROTECT [list $notmod] 2 }
	global CONFIG_BDM_DISABLE
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_BDM_DISABLE $CONFIG_BDM_DISABLE [list $notmod] 2 }
	close $cfg
	close $autocfg
}


proc clear_choices { } {
	global CONFIG_LEON_2; set CONFIG_LEON_2 0
	global CONFIG_LEON_3; set CONFIG_LEON_3 0
	global CONFIG_RAMKERNEL; set CONFIG_RAMKERNEL 0
	global CONFIG_ROMKERNEL; set CONFIG_ROMKERNEL 0
}


proc update_choices { } {
	global tmpvar_0
	set tmpvar_0 "LEON-3.x"
	global CONFIG_LEON_2
	if { $CONFIG_LEON_2 == 1 } then { set tmpvar_0 "LEON-2.x" }
	global CONFIG_LEON_3
	if { $CONFIG_LEON_3 == 1 } then { set tmpvar_0 "LEON-3.x" }
	global tmpvar_1
	set tmpvar_1 "ROM"
	global CONFIG_RAMKERNEL
	if { $CONFIG_RAMKERNEL == 1 } then { set tmpvar_1 "RAM" }
	global CONFIG_ROMKERNEL
	if { $CONFIG_ROMKERNEL == 1 } then { set tmpvar_1 "ROM" }
}


proc update_define_mainmenu {} {
	global CONFIG_MODULES
	global CONFIG_UCLINUX
	global CONSTANT_Y
	set CONFIG_UCLINUX $CONSTANT_Y
}


set defaults "arch/sparcnommu/defconfig"
# FILE: tail.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1998, Michael Elizabeth Chastain, <mec@shout.net>
# Arrange buttons in three columns for better screen fitting.
#

#
# Read the user's settings from .config.  These will override whatever is
# in config.in.  Don't do this if the user specified a -D to force
# the defaults.
#
if { [file readable .config] == 1} then {
	if { $argc > 0 } then {
		if { [lindex $argv 0] != "-D" } then {
			read_config .config
		}
		else
		{
			read_config $defaults
		}
	} else {
		read_config .config
	}
} else {
	read_config $defaults
}

update_define 1 $total_menus 0
update_mainmenu

if { [file exists include/linux/] == 1 } then {
	set autoconf_file "include/linux/autoconf.h"
} else {
	set autoconf_file "/dev/null"
}

button .f0.right.save -anchor w -text "Save and Exit" \
    -command {
		catch {exec cp -f .config .config.old}
		writeconfig .config $autoconf_file;
		if { [file exists include/linux/] == 1 } then {
			wrapup .wrap
		} else {
			exit
		}
	}

button .f0.right.quit -anchor w -text "Quit Without Saving" \
    -command { maybe_exit .maybe }

button .f0.right.load -anchor w -text "Load Configuration from File" \
    -command { load_configfile .load "Load Configuration from file" read_config_file
}

button .f0.right.store -anchor w -text "Store Configuration to File" \
    -command { load_configfile .load "Store Configuration to file" write_config_file }

#
# Now pack everything.
#

pack .f0.right.store .f0.right.load .f0.right.quit .f0.right.save \
    -padx 0 -pady 0 -side bottom -fill x
pack .f0.left .f0.middle .f0.right -side left -padx 5 -pady 0 -fill y
pack .f0 -padx 5 -pady 5

update idletasks
set winy [expr 10 + [winfo reqheight .f0]]
set scry [lindex [wm maxsize .] 1]
set winx [expr 10 + [winfo reqwidth .f0]]
set scrx [lindex [wm maxsize .] 0]
if {$winx < $scrx} then {set maxx -1} else {set maxx $winx}
if {$winy < $scry} then {set maxy -1} else {set maxy $winy}
.f0 configure -width $winx -height $winy 
wm maxsize . $maxx $maxy

#
# If we cannot write our config files, disable the write button.
#
if { [file exists .config] == 1 } then {
		if { [file writable .config] == 0 } then {
			.f0.right.save configure -state disabled
		}
	} else {
		if { [file writable .] == 0 } then {
			.f0.right.save configure -state disabled
		}
	}

if { [file exists $autoconf_file] == 1 } then {
		if { [file writable $autoconf_file] == 0 } then {
			.f0.right.save configure -state disabled
		}
	} else {
		if { [file writable include/linux/] == 0 } then {
			.f0.right.save configure -state disabled
		}
	}
